"use strict";(self.webpackChunknft_market=self.webpackChunknft_market||[]).push([[9856],{83714:(e,t,o)=>{var a=o(26382).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.Common=void 0;const r=o(63440),i=o(81031),s=o(27284),n=o(10406),c=o(12336),d=o(17280),h=o(13737),f=o(14429),l=o(11395),m=o(23917),u=o(13546),p=o(36870);class g extends s.EventEmitter{constructor(e){var t,o;super(),this._eips=[],this._customChains=null!==(t=e.customChains)&&void 0!==t?t:[],this._chainParams=this.setChain(e.chain),this.DEFAULT_HARDFORK=null!==(o=this._chainParams.defaultHardfork)&&void 0!==o?o:m.Hardfork.Merge,this.HARDFORK_CHANGES=this.hardforks().map((e=>[e.name,u.hardforks[e.name]])),this._hardfork=this.DEFAULT_HARDFORK,void 0!==e.hardfork&&this.setHardfork(e.hardfork),e.eips&&this.setEIPs(e.eips)}static custom(e){var t;let o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const a=null!==(t=o.baseChain)&&void 0!==t?t:"mainnet",r={...g._getChainParams(a)};if(r.name="custom-chain","string"!==typeof e)return new g({chain:{...r,...e},...o});if(e===m.CustomChain.PolygonMainnet)return g.custom({name:m.CustomChain.PolygonMainnet,chainId:137,networkId:137},o);if(e===m.CustomChain.PolygonMumbai)return g.custom({name:m.CustomChain.PolygonMumbai,chainId:80001,networkId:80001},o);if(e===m.CustomChain.ArbitrumRinkebyTestnet)return g.custom({name:m.CustomChain.ArbitrumRinkebyTestnet,chainId:421611,networkId:421611},o);if(e===m.CustomChain.ArbitrumOne)return g.custom({name:m.CustomChain.ArbitrumOne,chainId:42161,networkId:42161},o);if(e===m.CustomChain.xDaiChain)return g.custom({name:m.CustomChain.xDaiChain,chainId:100,networkId:100},o);if(e===m.CustomChain.OptimisticKovan)return g.custom({name:m.CustomChain.OptimisticKovan,chainId:69,networkId:69},{hardfork:m.Hardfork.Berlin,...o});if(e===m.CustomChain.OptimisticEthereum)return g.custom({name:m.CustomChain.OptimisticEthereum,chainId:10,networkId:10},{hardfork:m.Hardfork.Berlin,...o});throw new Error("Custom chain ".concat(e," not supported"))}static fromGethGenesis(e,t){var o;let{chain:a,eips:r,genesisHash:i,hardfork:s,mergeForkIdPostMerge:n}=t;const c=(0,p.parseGethGenesis)(e,a,n),d=new g({chain:null!==(o=c.name)&&void 0!==o?o:"custom",customChains:[c],eips:r,hardfork:null!==s&&void 0!==s?s:c.hardfork});return void 0!==i&&d.setForkHashes(i),d}static isSupportedChainId(e){const t=this._getInitializedChains();return Boolean(t.names[e.toString()])}static _getChainParams(e,t){const o=this._getInitializedChains(t);if("number"===typeof e||"bigint"===typeof e){if(e=e.toString(),o.names[e]){return o[o.names[e]]}throw new Error("Chain with ID ".concat(e," not supported"))}if(void 0!==o[e])return o[e];throw new Error("Chain with name ".concat(e," not supported"))}setChain(e){if("number"===typeof e||"bigint"===typeof e||"string"===typeof e)this._chainParams=g._getChainParams(e,this._customChains);else{if("object"!==typeof e)throw new Error("Wrong input format");{if(this._customChains.length>0)throw new Error("Chain must be a string, number, or bigint when initialized with customChains passed in");const t=["networkId","genesis","hardforks","bootstrapNodes"];for(const o of t)if(!(o in e))throw new Error("Missing required chain parameter: ".concat(o));this._chainParams=e}}for(const t of this.hardforks())if(void 0===t.block)throw new Error("Hardfork cannot have undefined block number");return this._chainParams}setHardfork(e){let t=!1;for(const o of this.HARDFORK_CHANGES)o[0]===e&&(this._hardfork!==e&&(this._hardfork=e,this.emit("hardforkChanged",e)),t=!0);if(!t)throw new Error("Hardfork with name ".concat(e," not supported"))}getHardforkByBlockNumber(e,t,o){e=(0,r.toType)(e,r.TypeOutput.BigInt),t=(0,r.toType)(t,r.TypeOutput.BigInt),o=(0,r.toType)(o,r.TypeOutput.Number);const a=this.hardforks().filter((e=>null!==e.block||null!==e.ttd&&void 0!==e.ttd||void 0!==e.timestamp)),i=a.findIndex((e=>null!==e.ttd&&void 0!==e.ttd));if(a.slice(i+1).findIndex((e=>null!==e.ttd&&void 0!==e.ttd))>=0)throw Error("More than one merge hardforks found with ttd specified");let s=a.findIndex((t=>null!==t.block&&t.block>e||void 0!==o&&Number(t.timestamp)>o));if(-1===s)s=a.length;else if(0===s)throw Error("Must have at least one hardfork at block 0");if(void 0===o){s-=a.slice(0,s).reverse().findIndex((e=>null!==e.block||void 0!==e.ttd))}if(s-=1,null===a[s].block&&void 0===a[s].timestamp)(void 0===t||null===t||BigInt(a[s].ttd)>t)&&(s-=1);else if(i>=0&&void 0!==t&&null!==t){if(s>=i&&BigInt(a[i].ttd)>t)throw Error("Maximum HF determined by total difficulty is lower than the block number HF");if(s<i&&BigInt(a[i].ttd)<=t)throw Error("HF determined by block number is lower than the minimum total difficulty HF")}const n=s;for(;s<a.length-1&&(a[s].block===a[s+1].block&&a[s].timestamp===a[s+1].timestamp);s++);if(o){if(a.slice(0,n).reduce(((e,t)=>{var o;return Math.max(Number(null!==(o=t.timestamp)&&void 0!==o?o:"0"),e)}),0)>o)throw Error("Maximum HF determined by timestamp is lower than the block number/ttd HF");if(a.slice(s+1).reduce(((e,t)=>{var a;return Math.min(Number(null!==(a=t.timestamp)&&void 0!==a?a:o),e)}),o)<o)throw Error("Maximum HF determined by block number/ttd is lower than timestamp HF")}return a[s].name}setHardforkByBlockNumber(e,t,o){const a=this.getHardforkByBlockNumber(e,t,o);return this.setHardfork(a),a}_getHardfork(e){const t=this.hardforks();for(const o of t)if(o.name===e)return o;return null}setEIPs(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];for(const t of e){if(!(t in l.EIPs))throw new Error("".concat(t," not supported"));const o=this.gteHardfork(l.EIPs[t].minimumHardfork);if(!o)throw new Error("".concat(t," cannot be activated on hardfork ").concat(this.hardfork(),", minimumHardfork: ").concat(o));if(void 0!==l.EIPs[t].requiredEIPs)for(const a of l.EIPs[t].requiredEIPs)if(!e.includes(a)&&!this.isActivatedEIP(a))throw new Error("".concat(t," requires EIP ").concat(a,", but is not included in the EIP list"))}this._eips=e}param(e,t){let o;for(const a of this._eips)if(o=this.paramByEIP(e,t,a),void 0!==o)return o;return this.paramByHardfork(e,t,this._hardfork)}paramByHardfork(e,t,o){var a;let r=null;for(const i of this.HARDFORK_CHANGES){if("eips"in i[1]){const o=i[1].eips;for(const a of o){const o=this.paramByEIP(e,t,a);r="bigint"===typeof o?o:r}}else{if(void 0===i[1][e])throw new Error("Topic ".concat(e," not defined"));void 0!==i[1][e][t]&&(r=i[1][e][t].v)}if(i[0]===o)break}return BigInt(null!==(a=r)&&void 0!==a?a:0)}paramByEIP(e,t,o){if(!(o in l.EIPs))throw new Error("".concat(o," not supported"));const a=l.EIPs[o];if(!(e in a))throw new Error("Topic ".concat(e," not defined"));if(void 0===a[e][t])return;const r=a[e][t].v;return BigInt(r)}paramByBlock(e,t,o,a,r){const i=this.getHardforkByBlockNumber(o,a,r);return this.paramByHardfork(e,t,i)}isActivatedEIP(e){if(this.eips().includes(e))return!0;for(const t of this.HARDFORK_CHANGES){const o=t[1];if(this.gteHardfork(o.name)&&"eips"in o&&o.eips.includes(e))return!0}return!1}hardforkIsActiveOnBlock(e,t){var o;t=(0,r.toType)(t,r.TypeOutput.BigInt),e=null!==(o=e)&&void 0!==o?o:this._hardfork;const a=this.hardforkBlock(e);return"bigint"===typeof a&&a!==BigInt(0)&&t>=a}activeOnBlock(e){return this.hardforkIsActiveOnBlock(null,e)}hardforkGteHardfork(e,t){var o;e=null!==(o=e)&&void 0!==o?o:this._hardfork;const a=this.hardforks();let r=-1,i=-1,s=0;for(const n of a)n.name===e&&(r=s),n.name===t&&(i=s),s+=1;return r>=i&&-1!==i}gteHardfork(e){return this.hardforkGteHardfork(null,e)}hardforkBlock(e){var t,o;e=null!==(t=e)&&void 0!==t?t:this._hardfork;const a=null===(o=this._getHardfork(e))||void 0===o?void 0:o.block;return void 0===a||null===a?null:BigInt(a)}hardforkTimestamp(e){var t,o;e=null!==(t=e)&&void 0!==t?t:this._hardfork;const a=null===(o=this._getHardfork(e))||void 0===o?void 0:o.timestamp;return void 0===a||null===a?null:BigInt(a)}eipBlock(e){for(const t of this.HARDFORK_CHANGES){const o=t[1];if("eips"in o&&o.eips.includes(e))return this.hardforkBlock(t[0])}return null}hardforkTTD(e){var t,o;e=null!==(t=e)&&void 0!==t?t:this._hardfork;const a=null===(o=this._getHardfork(e))||void 0===o?void 0:o.ttd;return void 0===a||null===a?null:BigInt(a)}isHardforkBlock(e,t){var o;e=(0,r.toType)(e,r.TypeOutput.BigInt),t=null!==(o=t)&&void 0!==o?o:this._hardfork;const a=this.hardforkBlock(t);return"bigint"===typeof a&&a!==BigInt(0)&&a===e}nextHardforkBlockOrTimestamp(e){var t,o,a;e=null!==(t=e)&&void 0!==t?t:this._hardfork;const r=this.hardforks();let i=r.findIndex((t=>t.name===e));if(e===m.Hardfork.Merge&&(i-=1),i<0)return null;let s=null!==(o=r[i].timestamp)&&void 0!==o?o:r[i].block;s=null!==s&&void 0!==s?Number(s):null;const n=r.slice(i+1).find((e=>{var t;let o=null!==(t=e.timestamp)&&void 0!==t?t:e.block;return o=null!==o&&void 0!==o?Number(o):null,e.name!==m.Hardfork.Merge&&null!==o&&void 0!==o&&o!==s}));if(void 0===n)return null;const c=null!==(a=n.timestamp)&&void 0!==a?a:n.block;return null===c||void 0===c?null:BigInt(c)}nextHardforkBlock(e){var t;e=null!==(t=e)&&void 0!==t?t:this._hardfork;let o=this.hardforkBlock(e);if(null===o&&e===m.Hardfork.Merge){const e=this.hardforks(),t=e.findIndex((e=>null!==e.ttd&&void 0!==e.ttd));if(t<0)throw Error("Merge hardfork should have been found");o=this.hardforkBlock(e[t-1].name)}if(null===o)return null;return this.hardforks().reduce(((e,t)=>{const a=BigInt(null===t.block||void 0!==t.ttd&&null!==t.ttd?0:t.block);return a>o&&null===e?a:e}),null)}isNextHardforkBlock(e,t){var o;e=(0,r.toType)(e,r.TypeOutput.BigInt),t=null!==(o=t)&&void 0!==o?o:this._hardfork;const a=this.nextHardforkBlock(t);return null!==a&&a===e}_calcForkHash(e,t){let o=a.alloc(0),s=0;for(const r of this.hardforks()){const{block:t,timestamp:i,name:n}=r;let c=null!==i&&void 0!==i?i:t;if(c=null!==c?Number(c):null,"number"===typeof c&&0!==c&&c!==s&&n!==m.Hardfork.Merge){const e=a.from(c.toString(16).padStart(16,"0"),"hex");o=a.concat([o,e]),s=c}if(r.name===e)break}const n=a.concat([t,o]),c=(0,r.intToBuffer)((0,i.buf)(n)>>>0).toString("hex");return"0x".concat(c)}forkHash(e,t){var o;e=null!==(o=e)&&void 0!==o?o:this._hardfork;const a=this._getHardfork(e);if(null===a||null===(null===a||void 0===a?void 0:a.block)&&void 0===(null===a||void 0===a?void 0:a.timestamp)&&void 0===(null===a||void 0===a?void 0:a.ttd)){throw new Error("No fork hash calculation possible for future hardfork")}if(null!==(null===a||void 0===a?void 0:a.forkHash)&&void 0!==(null===a||void 0===a?void 0:a.forkHash))return a.forkHash;if(!t)throw new Error("genesisHash required for forkHash calculation");return this._calcForkHash(e,t)}hardforkForForkHash(e){const t=this.hardforks().filter((t=>t.forkHash===e));return t.length>=1?t[t.length-1]:null}setForkHashes(e){for(const o of this.hardforks()){var t;const a=null!==(t=o.timestamp)&&void 0!==t?t:o.block;null!==o.forkHash&&void 0!==o.forkHash||(null===a||void 0===a)&&"undefined"===typeof o.ttd||(o.forkHash=this.forkHash(o.name,e))}}genesis(){return this._chainParams.genesis}hardforks(){return this._chainParams.hardforks}bootstrapNodes(){return this._chainParams.bootstrapNodes}dnsNetworks(){return this._chainParams.dnsNetworks}hardfork(){return this._hardfork}chainId(){return BigInt(this._chainParams.chainId)}chainName(){return this._chainParams.name}networkId(){return BigInt(this._chainParams.networkId)}eips(){return this._eips}consensusType(){var e;const t=this.hardfork();let o;for(const a of this.HARDFORK_CHANGES)if("consensus"in a[1]&&(o=a[1].consensus.type),a[0]===t)break;return null!==(e=o)&&void 0!==e?e:this._chainParams.consensus.type}consensusAlgorithm(){var e;const t=this.hardfork();let o;for(const a of this.HARDFORK_CHANGES)if("consensus"in a[1]&&(o=a[1].consensus.algorithm),a[0]===t)break;return null!==(e=o)&&void 0!==e?e:this._chainParams.consensus.algorithm}consensusConfig(){var e,t;const o=this.hardfork();let a;for(const r of this.HARDFORK_CHANGES)if("consensus"in r[1]&&(a=r[1].consensus[r[1].consensus.algorithm]),r[0]===o)break;return null!==(e=null!==(t=a)&&void 0!==t?t:this._chainParams.consensus[this.consensusAlgorithm()])&&void 0!==e?e:{}}copy(){const e=Object.assign(Object.create(Object.getPrototypeOf(this)),this);return e.removeAllListeners(),e}static _getInitializedChains(e){const t={};for(const[a,r]of Object.entries(m.Chain))t[r]=a.toLowerCase();const o={mainnet:c,ropsten:h,rinkeby:d,goerli:n,sepolia:f};if(e)for(const a of e){const{name:e}=a;t[a.chainId.toString()]=e,o[e]=a}return o.names=t,o}}t.Common=g},11395:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EIPs=void 0,t.EIPs={1153:o(42973),1559:o(23031),2315:o(14918),2537:o(86284),2565:o(78315),2718:o(61417),2929:o(76967),2930:o(67577),3074:o(46475),3198:o(48542),3529:o(77294),3540:o(331),3541:o(91464),3554:o(44298),3607:o(45515),3651:o(77436),3670:o(75569),3675:o(31770),3855:o(57610),3860:o(58842),4345:o(86865),4399:o(75160),4844:o(76111),4895:o(63025),5133:o(62047)}},23917:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CustomChain=t.ConsensusAlgorithm=t.ConsensusType=t.Hardfork=t.Chain=void 0,function(e){e[e.Mainnet=1]="Mainnet",e[e.Ropsten=3]="Ropsten",e[e.Rinkeby=4]="Rinkeby",e[e.Goerli=5]="Goerli",e[e.Sepolia=11155111]="Sepolia"}(t.Chain||(t.Chain={})),function(e){e.Chainstart="chainstart",e.Homestead="homestead",e.Dao="dao",e.TangerineWhistle="tangerineWhistle",e.SpuriousDragon="spuriousDragon",e.Byzantium="byzantium",e.Constantinople="constantinople",e.Petersburg="petersburg",e.Istanbul="istanbul",e.MuirGlacier="muirGlacier",e.Berlin="berlin",e.London="london",e.ArrowGlacier="arrowGlacier",e.GrayGlacier="grayGlacier",e.MergeForkIdTransition="mergeForkIdTransition",e.Merge="merge",e.Shanghai="shanghai",e.ShardingForkDev="shardingFork"}(t.Hardfork||(t.Hardfork={})),function(e){e.ProofOfStake="pos",e.ProofOfWork="pow",e.ProofOfAuthority="poa"}(t.ConsensusType||(t.ConsensusType={})),function(e){e.Ethash="ethash",e.Clique="clique",e.Casper="casper"}(t.ConsensusAlgorithm||(t.ConsensusAlgorithm={})),function(e){e.PolygonMainnet="polygon-mainnet",e.PolygonMumbai="polygon-mumbai",e.ArbitrumRinkebyTestnet="arbitrum-rinkeby-testnet",e.ArbitrumOne="arbitrum-one",e.xDaiChain="x-dai-chain",e.OptimisticKovan="optimistic-kovan",e.OptimisticEthereum="optimistic-ethereum"}(t.CustomChain||(t.CustomChain={}))},13546:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.hardforks=void 0,t.hardforks={chainstart:o(61497),homestead:o(9448),dao:o(27582),tangerineWhistle:o(53725),spuriousDragon:o(53521),byzantium:o(13821),constantinople:o(88593),petersburg:o(11683),istanbul:o(77e3),muirGlacier:o(99752),berlin:o(72094),london:o(68816),shanghai:o(62783),arrowGlacier:o(94164),grayGlacier:o(62386),mergeForkIdTransition:o(69828),merge:o(69430),shardingFork:o(49302)}},93755:function(e,t,o){var a=this&&this.__createBinding||(Object.create?function(e,t,o,a){void 0===a&&(a=o);var r=Object.getOwnPropertyDescriptor(t,o);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[o]}}),Object.defineProperty(e,a,r)}:function(e,t,o,a){void 0===a&&(a=o),e[a]=t[o]}),r=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||a(t,e,o)};Object.defineProperty(t,"__esModule",{value:!0}),r(o(83714),t),r(o(23917),t),r(o(58),t),r(o(36870),t)},58:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},36870:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.parseGethGenesis=void 0;const a=o(63440),r=o(23917);function i(e){var t,o;let i=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const{name:s,config:n,difficulty:c,mixHash:d,gasLimit:h,coinbase:f,baseFeePerGas:l}=e;let{extraData:m,timestamp:u,nonce:p}=e;const g=Number(u),{chainId:b}=n;if(""===m&&(m="0x"),(0,a.isHexPrefixed)(u)||(u=(0,a.intToHex)(parseInt(u))),18!==p.length&&(p=function(e){return e&&"0x0"!==e?(0,a.isHexPrefixed)(e)?"0x"+(0,a.stripHexPrefix)(e).padStart(16,"0"):"0x"+e.padStart(16,"0"):"0x0000000000000000"}(p)),n.eip155Block!==n.eip158Block)throw new Error("EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork");const v={name:s,chainId:b,networkId:b,genesis:{timestamp:u,gasLimit:parseInt(h),difficulty:parseInt(c),nonce:p,extraData:m,mixHash:d,coinbase:f,baseFeePerGas:l},hardfork:void 0,hardforks:[],bootstrapNodes:[],consensus:void 0!==n.clique?{type:"poa",algorithm:"clique",clique:{period:null!==(t=n.clique.period)&&void 0!==t?t:n.clique.blockperiodseconds,epoch:null!==(o=n.clique.epoch)&&void 0!==o?o:n.clique.epochlength}}:{type:"pow",algorithm:"ethash",ethash:{}}},k={[r.Hardfork.Homestead]:{name:"homesteadBlock"},[r.Hardfork.Dao]:{name:"daoForkBlock"},[r.Hardfork.TangerineWhistle]:{name:"eip150Block"},[r.Hardfork.SpuriousDragon]:{name:"eip155Block"},[r.Hardfork.Byzantium]:{name:"byzantiumBlock"},[r.Hardfork.Constantinople]:{name:"constantinopleBlock"},[r.Hardfork.Petersburg]:{name:"petersburgBlock"},[r.Hardfork.Istanbul]:{name:"istanbulBlock"},[r.Hardfork.MuirGlacier]:{name:"muirGlacierBlock"},[r.Hardfork.Berlin]:{name:"berlinBlock"},[r.Hardfork.London]:{name:"londonBlock"},[r.Hardfork.MergeForkIdTransition]:{name:"mergeForkBlock",postMerge:i},[r.Hardfork.Shanghai]:{name:"shanghaiTime",postMerge:!0,isTimestamp:!0},[r.Hardfork.ShardingForkDev]:{name:"shardingForkTime",postMerge:!0,isTimestamp:!0}},P=Object.keys(k).reduce(((e,t)=>(e[k[t].name]=t,e)),{}),I=Object.keys(n).filter((e=>void 0!==P[e]&&void 0!==n[e]&&null!==n[e]));if(v.hardforks=I.map((e=>({name:P[e],block:!0===k[P[e]].isTimestamp||"number"!==typeof n[e]?null:n[e],timestamp:!0===k[P[e]].isTimestamp&&"number"===typeof n[e]?n[e]:void 0}))).filter((e=>null!==e.block||void 0!==e.timestamp)),v.hardforks.sort((function(e,t){var o,a;return(null!==(o=e.block)&&void 0!==o?o:1/0)-(null!==(a=t.block)&&void 0!==a?a:1/0)})),v.hardforks.sort((function(e,t){var o,a;return(null!==(o=e.timestamp)&&void 0!==o?o:g)-(null!==(a=t.timestamp)&&void 0!==a?a:g)})),void 0!==n.terminalTotalDifficulty){const e={name:r.Hardfork.Merge,ttd:n.terminalTotalDifficulty,block:null},t=v.hardforks.findIndex((e=>{var t;return!0===(null===(t=k[e.name])||void 0===t?void 0:t.postMerge)}));-1!==t?v.hardforks.splice(t,0,e):v.hardforks.push(e)}const E=v.hardforks.length>0?v.hardforks.slice(-1)[0]:void 0;return v.hardfork=null===E||void 0===E?void 0:E.name,v.hardforks.unshift({name:r.Hardfork.Chainstart,block:0}),v}t.parseGethGenesis=function(e,t,o){try{if(["config","difficulty","gasLimit","alloc"].some((t=>!(t in e))))throw new Error("Invalid format, expected geth genesis fields missing");return void 0!==t&&(e.name=t),i(e,o)}catch(a){throw new Error("Error parsing parameters file: ".concat(a.message))}}},295:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BaseTransaction=void 0;const a=o(93755),r=o(63440),i=o(98805),s=o(52954);t.BaseTransaction=class{constructor(e,t){var o,i;this.cache={hash:void 0,dataFee:void 0},this.activeCapabilities=[],this.DEFAULT_CHAIN=a.Chain.Mainnet,this.DEFAULT_HARDFORK=a.Hardfork.Merge;const{nonce:n,gasLimit:c,to:d,value:h,data:f,v:l,r:m,s:u,type:p}=e;this._type=Number((0,r.bufferToBigInt)((0,r.toBuffer)(p))),this.txOptions=t;const g=(0,r.toBuffer)(""===d?"0x":d),b=(0,r.toBuffer)(""===l?"0x":l),v=(0,r.toBuffer)(""===m?"0x":m),k=(0,r.toBuffer)(""===u?"0x":u);this.nonce=(0,r.bufferToBigInt)((0,r.toBuffer)(""===n?"0x":n)),this.gasLimit=(0,r.bufferToBigInt)((0,r.toBuffer)(""===c?"0x":c)),this.to=g.length>0?new r.Address(g):void 0,this.value=(0,r.bufferToBigInt)((0,r.toBuffer)(""===h?"0x":h)),this.data=(0,r.toBuffer)(""===f?"0x":f),this.v=b.length>0?(0,r.bufferToBigInt)(b):void 0,this.r=v.length>0?(0,r.bufferToBigInt)(v):void 0,this.s=k.length>0?(0,r.bufferToBigInt)(k):void 0,this._validateCannotExceedMaxInteger({value:this.value,r:this.r,s:this.s}),this._validateCannotExceedMaxInteger({gasLimit:this.gasLimit},64),this._validateCannotExceedMaxInteger({nonce:this.nonce},64,!0);const P=void 0===this.to||null===this.to,I=null!==(o=t.allowUnlimitedInitCodeSize)&&void 0!==o&&o,E=null!==(i=t.common)&&void 0!==i?i:this._getCommon();P&&E.isActivatedEIP(3860)&&!1===I&&(0,s.checkMaxInitCodeSize)(E,this.data.length)}get type(){return this._type}supports(e){return this.activeCapabilities.includes(e)}validate(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];const t=[];return this.getBaseFee()>this.gasLimit&&t.push("gasLimit is too low. given ".concat(this.gasLimit,", need at least ").concat(this.getBaseFee())),this.isSigned()&&!this.verifySignature()&&t.push("Invalid Signature"),e?t:0===t.length}_validateYParity(){const{v:e}=this;if(void 0!==e&&e!==BigInt(0)&&e!==BigInt(1)){const e=this._errorMsg("The y-parity of the transaction should either be 0 or 1");throw new Error(e)}}_validateHighS(){const{s:e}=this;if(this.common.gteHardfork("homestead")&&void 0!==e&&e>r.SECP256K1_ORDER_DIV_2){const e=this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");throw new Error(e)}}getBaseFee(){const e=this.common.param("gasPrices","tx");let t=this.getDataFee();if(e&&(t+=e),this.common.gteHardfork("homestead")&&this.toCreationAddress()){const e=this.common.param("gasPrices","txCreation");e&&(t+=e)}return t}getDataFee(){const e=this.common.param("gasPrices","txDataZero"),t=this.common.param("gasPrices","txDataNonZero");let o=BigInt(0);for(let a=0;a<this.data.length;a++)0===this.data[a]?o+=e:o+=t;if((void 0===this.to||null===this.to)&&this.common.isActivatedEIP(3860)){const e=BigInt(Math.ceil(this.data.length/32));o+=this.common.param("gasPrices","initCodeWordCost")*e}return o}toCreationAddress(){return void 0===this.to||0===this.to.buf.length}isSigned(){const{v:e,r:t,s:o}=this;return void 0!==e&&void 0!==t&&void 0!==o}verifySignature(){try{const e=this.getSenderPublicKey();return 0!==(0,r.unpadBuffer)(e).length}catch(e){return!1}}getSenderAddress(){return new r.Address((0,r.publicToAddress)(this.getSenderPublicKey()))}sign(e){if(32!==e.length){const e=this._errorMsg("Private key must be 32 bytes in length.");throw new Error(e)}let t=!1;0===this.type&&this.common.gteHardfork("spuriousDragon")&&!this.supports(i.Capability.EIP155ReplayProtection)&&(this.activeCapabilities.push(i.Capability.EIP155ReplayProtection),t=!0);const o=this.getMessageToSign(!0),{v:a,r:s,s:n}=(0,r.ecsign)(o,e),c=this._processSignature(a,s,n);if(t){const e=this.activeCapabilities.indexOf(i.Capability.EIP155ReplayProtection);e>-1&&this.activeCapabilities.splice(e,1)}return c}_getCommon(e,t){if(void 0!==t){const o=(0,r.bufferToBigInt)((0,r.toBuffer)(t));if(e){if(e.chainId()!==o){const e=this._errorMsg("The chain ID does not match the chain ID of Common");throw new Error(e)}return e.copy()}return a.Common.isSupportedChainId(o)?new a.Common({chain:o,hardfork:this.DEFAULT_HARDFORK}):a.Common.custom({name:"custom-chain",networkId:o,chainId:o},{baseChain:this.DEFAULT_CHAIN,hardfork:this.DEFAULT_HARDFORK})}var o;return null!==(o=null===e||void 0===e?void 0:e.copy())&&void 0!==o?o:new a.Common({chain:this.DEFAULT_CHAIN,hardfork:this.DEFAULT_HARDFORK})}_validateCannotExceedMaxInteger(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:256,o=arguments.length>2&&void 0!==arguments[2]&&arguments[2];for(const[a,i]of Object.entries(e))switch(t){case 64:if(o){if(void 0!==i&&i>=r.MAX_UINT64){const e=this._errorMsg("".concat(a," cannot equal or exceed MAX_UINT64 (2^64-1), given ").concat(i));throw new Error(e)}}else if(void 0!==i&&i>r.MAX_UINT64){const e=this._errorMsg("".concat(a," cannot exceed MAX_UINT64 (2^64-1), given ").concat(i));throw new Error(e)}break;case 256:if(o){if(void 0!==i&&i>=r.MAX_INTEGER){const e=this._errorMsg("".concat(a," cannot equal or exceed MAX_INTEGER (2^256-1), given ").concat(i));throw new Error(e)}}else if(void 0!==i&&i>r.MAX_INTEGER){const e=this._errorMsg("".concat(a," cannot exceed MAX_INTEGER (2^256-1), given ").concat(i));throw new Error(e)}break;default:{const e=this._errorMsg("unimplemented bits value");throw new Error(e)}}}static _validateNotArray(e){const t=["nonce","gasPrice","gasLimit","to","value","data","v","r","s","type","baseFee","maxFeePerGas","chainId"];for(const[o,a]of Object.entries(e))if(t.includes(o)&&Array.isArray(a))throw new Error("".concat(o," cannot be an array"))}_getSharedErrorPostfix(){let e="";try{e=this.isSigned()?(0,r.bufferToHex)(this.hash()):"not available (unsigned)"}catch(i){e="error"}let t="";try{t=this.isSigned().toString()}catch(i){e="error"}let o="";try{o=this.common.hardfork()}catch(i){o="error"}let a="tx type=".concat(this.type," hash=").concat(e," nonce=").concat(this.nonce," value=").concat(this.value," ");return a+="signed=".concat(t," hf=").concat(o),a}}},39672:(e,t,o)=>{var a=o(26382).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.FeeMarketEIP1559Transaction=void 0;const r=o(85576),i=o(63440),s=o(30994),n=o(295),c=o(52954),d=a.from(2..toString(16).padStart(2,"0"),"hex");class h extends n.BaseTransaction{constructor(e){var t;let o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};super({...e,type:2},o),this.DEFAULT_HARDFORK="london";const{chainId:a,accessList:r,maxFeePerGas:s,maxPriorityFeePerGas:d}=e;if(this.common=this._getCommon(o.common,a),this.chainId=this.common.chainId(),!1===this.common.isActivatedEIP(1559))throw new Error("EIP-1559 not enabled on Common");this.activeCapabilities=this.activeCapabilities.concat([1559,2718,2930]);const h=c.AccessLists.getAccessListData(null!==r&&void 0!==r?r:[]);if(this.accessList=h.accessList,this.AccessListJSON=h.AccessListJSON,c.AccessLists.verifyAccessList(this.accessList),this.maxFeePerGas=(0,i.bufferToBigInt)((0,i.toBuffer)(""===s?"0x":s)),this.maxPriorityFeePerGas=(0,i.bufferToBigInt)((0,i.toBuffer)(""===d?"0x":d)),this._validateCannotExceedMaxInteger({maxFeePerGas:this.maxFeePerGas,maxPriorityFeePerGas:this.maxPriorityFeePerGas}),n.BaseTransaction._validateNotArray(e),this.gasLimit*this.maxFeePerGas>i.MAX_INTEGER){const e=this._errorMsg("gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)");throw new Error(e)}if(this.maxFeePerGas<this.maxPriorityFeePerGas){const e=this._errorMsg("maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)");throw new Error(e)}this._validateYParity(),this._validateHighS();(null===(t=null===o||void 0===o?void 0:o.freeze)||void 0===t||t)&&Object.freeze(this)}static fromTxData(e){return new h(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:{})}static fromSerializedTx(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!e.slice(0,1).equals(d))throw new Error("Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ".concat(2,", received: ").concat(e.slice(0,1).toString("hex")));const o=(0,i.arrToBufArr)(r.RLP.decode(e.slice(1)));if(!Array.isArray(o))throw new Error("Invalid serialized tx input: must be array");return h.fromValuesArray(o,t)}static fromValuesArray(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(9!==e.length&&12!==e.length)throw new Error("Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).");const[o,a,r,s,n,c,d,f,l,m,u,p]=e;return this._validateNotArray({chainId:o,v:m}),(0,i.validateNoLeadingZeroes)({nonce:a,maxPriorityFeePerGas:r,maxFeePerGas:s,gasLimit:n,value:d,v:m,r:u,s:p}),new h({chainId:(0,i.bufferToBigInt)(o),nonce:a,maxPriorityFeePerGas:r,maxFeePerGas:s,gasLimit:n,to:c,value:d,data:f,accessList:null!==l&&void 0!==l?l:[],v:void 0!==m?(0,i.bufferToBigInt)(m):void 0,r:u,s:p},t)}getDataFee(){if(this.cache.dataFee&&this.cache.dataFee.hardfork===this.common.hardfork())return this.cache.dataFee.value;let e=super.getDataFee();return e+=BigInt(c.AccessLists.getDataFeeEIP2930(this.accessList,this.common)),Object.isFrozen(this)&&(this.cache.dataFee={value:e,hardfork:this.common.hardfork()}),e}getUpfrontCost(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:BigInt(0);const t=this.maxPriorityFeePerGas,o=this.maxFeePerGas-e,a=(t<o?t:o)+e;return this.gasLimit*a+this.value}raw(){return[(0,i.bigIntToUnpaddedBuffer)(this.chainId),(0,i.bigIntToUnpaddedBuffer)(this.nonce),(0,i.bigIntToUnpaddedBuffer)(this.maxPriorityFeePerGas),(0,i.bigIntToUnpaddedBuffer)(this.maxFeePerGas),(0,i.bigIntToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:a.from([]),(0,i.bigIntToUnpaddedBuffer)(this.value),this.data,this.accessList,void 0!==this.v?(0,i.bigIntToUnpaddedBuffer)(this.v):a.from([]),void 0!==this.r?(0,i.bigIntToUnpaddedBuffer)(this.r):a.from([]),void 0!==this.s?(0,i.bigIntToUnpaddedBuffer)(this.s):a.from([])]}serialize(){const e=this.raw();return a.concat([d,a.from(r.RLP.encode((0,i.bufArrToArr)(e)))])}getMessageToSign(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];const t=this.raw().slice(0,9),o=a.concat([d,a.from(r.RLP.encode((0,i.bufArrToArr)(t)))]);return e?a.from((0,s.keccak256)(o)):o}hash(){if(!this.isSigned()){const e=this._errorMsg("Cannot call hash method if transaction is not signed");throw new Error(e)}return Object.isFrozen(this)?(this.cache.hash||(this.cache.hash=a.from((0,s.keccak256)(this.serialize()))),this.cache.hash):a.from((0,s.keccak256)(this.serialize()))}getMessageToVerifySignature(){return this.getMessageToSign()}getSenderPublicKey(){if(!this.isSigned()){const e=this._errorMsg("Cannot call this method if transaction is not signed");throw new Error(e)}const e=this.getMessageToVerifySignature(),{v:t,r:o,s:a}=this;this._validateHighS();try{return(0,i.ecrecover)(e,t+BigInt(27),(0,i.bigIntToUnpaddedBuffer)(o),(0,i.bigIntToUnpaddedBuffer)(a))}catch(r){const e=this._errorMsg("Invalid Signature");throw new Error(e)}}_processSignature(e,t,o){const a={...this.txOptions,common:this.common};return h.fromTxData({chainId:this.chainId,nonce:this.nonce,maxPriorityFeePerGas:this.maxPriorityFeePerGas,maxFeePerGas:this.maxFeePerGas,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,accessList:this.accessList,v:e-BigInt(27),r:(0,i.bufferToBigInt)(t),s:(0,i.bufferToBigInt)(o)},a)}toJSON(){const e=c.AccessLists.getAccessListJSON(this.accessList);return{chainId:(0,i.bigIntToHex)(this.chainId),nonce:(0,i.bigIntToHex)(this.nonce),maxPriorityFeePerGas:(0,i.bigIntToHex)(this.maxPriorityFeePerGas),maxFeePerGas:(0,i.bigIntToHex)(this.maxFeePerGas),gasLimit:(0,i.bigIntToHex)(this.gasLimit),to:void 0!==this.to?this.to.toString():void 0,value:(0,i.bigIntToHex)(this.value),data:"0x"+this.data.toString("hex"),accessList:e,v:void 0!==this.v?(0,i.bigIntToHex)(this.v):void 0,r:void 0!==this.r?(0,i.bigIntToHex)(this.r):void 0,s:void 0!==this.s?(0,i.bigIntToHex)(this.s):void 0}}errorStr(){let e=this._getSharedErrorPostfix();return e+=" maxFeePerGas=".concat(this.maxFeePerGas," maxPriorityFeePerGas=").concat(this.maxPriorityFeePerGas),e}_errorMsg(e){return"".concat(e," (").concat(this.errorStr(),")")}}t.FeeMarketEIP1559Transaction=h},82414:(e,t,o)=>{var a=o(26382).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.AccessListEIP2930Transaction=void 0;const r=o(85576),i=o(63440),s=o(30994),n=o(295),c=o(52954),d=a.from(1..toString(16).padStart(2,"0"),"hex");class h extends n.BaseTransaction{constructor(e){var t;let o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};super({...e,type:1},o),this.DEFAULT_HARDFORK="berlin";const{chainId:a,accessList:r,gasPrice:s}=e;if(this.common=this._getCommon(o.common,a),this.chainId=this.common.chainId(),!this.common.isActivatedEIP(2930))throw new Error("EIP-2930 not enabled on Common");this.activeCapabilities=this.activeCapabilities.concat([2718,2930]);const d=c.AccessLists.getAccessListData(null!==r&&void 0!==r?r:[]);if(this.accessList=d.accessList,this.AccessListJSON=d.AccessListJSON,c.AccessLists.verifyAccessList(this.accessList),this.gasPrice=(0,i.bufferToBigInt)((0,i.toBuffer)(""===s?"0x":s)),this._validateCannotExceedMaxInteger({gasPrice:this.gasPrice}),n.BaseTransaction._validateNotArray(e),this.gasPrice*this.gasLimit>i.MAX_INTEGER){const e=this._errorMsg("gasLimit * gasPrice cannot exceed MAX_INTEGER");throw new Error(e)}this._validateYParity(),this._validateHighS();(null===(t=null===o||void 0===o?void 0:o.freeze)||void 0===t||t)&&Object.freeze(this)}static fromTxData(e){return new h(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:{})}static fromSerializedTx(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!e.slice(0,1).equals(d))throw new Error("Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ".concat(1,", received: ").concat(e.slice(0,1).toString("hex")));const o=(0,i.arrToBufArr)(r.RLP.decode(Uint8Array.from(e.slice(1))));if(!Array.isArray(o))throw new Error("Invalid serialized tx input: must be array");return h.fromValuesArray(o,t)}static fromValuesArray(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(8!==e.length&&11!==e.length)throw new Error("Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).");const[o,a,r,s,n,c,d,f,l,m,u]=e;this._validateNotArray({chainId:o,v:l}),(0,i.validateNoLeadingZeroes)({nonce:a,gasPrice:r,gasLimit:s,value:c,v:l,r:m,s:u});return new h({chainId:(0,i.bufferToBigInt)(o),nonce:a,gasPrice:r,gasLimit:s,to:n,value:c,data:d,accessList:null!==f&&void 0!==f?f:[],v:void 0!==l?(0,i.bufferToBigInt)(l):void 0,r:m,s:u},t)}getDataFee(){if(this.cache.dataFee&&this.cache.dataFee.hardfork===this.common.hardfork())return this.cache.dataFee.value;let e=super.getDataFee();return e+=BigInt(c.AccessLists.getDataFeeEIP2930(this.accessList,this.common)),Object.isFrozen(this)&&(this.cache.dataFee={value:e,hardfork:this.common.hardfork()}),e}getUpfrontCost(){return this.gasLimit*this.gasPrice+this.value}raw(){return[(0,i.bigIntToUnpaddedBuffer)(this.chainId),(0,i.bigIntToUnpaddedBuffer)(this.nonce),(0,i.bigIntToUnpaddedBuffer)(this.gasPrice),(0,i.bigIntToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:a.from([]),(0,i.bigIntToUnpaddedBuffer)(this.value),this.data,this.accessList,void 0!==this.v?(0,i.bigIntToUnpaddedBuffer)(this.v):a.from([]),void 0!==this.r?(0,i.bigIntToUnpaddedBuffer)(this.r):a.from([]),void 0!==this.s?(0,i.bigIntToUnpaddedBuffer)(this.s):a.from([])]}serialize(){const e=this.raw();return a.concat([d,a.from(r.RLP.encode((0,i.bufArrToArr)(e)))])}getMessageToSign(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];const t=this.raw().slice(0,8),o=a.concat([d,a.from(r.RLP.encode((0,i.bufArrToArr)(t)))]);return e?a.from((0,s.keccak256)(o)):o}hash(){if(!this.isSigned()){const e=this._errorMsg("Cannot call hash method if transaction is not signed");throw new Error(e)}return Object.isFrozen(this)?(this.cache.hash||(this.cache.hash=a.from((0,s.keccak256)(this.serialize()))),this.cache.hash):a.from((0,s.keccak256)(this.serialize()))}getMessageToVerifySignature(){return this.getMessageToSign()}getSenderPublicKey(){if(!this.isSigned()){const e=this._errorMsg("Cannot call this method if transaction is not signed");throw new Error(e)}const e=this.getMessageToVerifySignature(),{v:t,r:o,s:a}=this;this._validateHighS();try{return(0,i.ecrecover)(e,t+BigInt(27),(0,i.bigIntToUnpaddedBuffer)(o),(0,i.bigIntToUnpaddedBuffer)(a))}catch(r){const e=this._errorMsg("Invalid Signature");throw new Error(e)}}_processSignature(e,t,o){const a={...this.txOptions,common:this.common};return h.fromTxData({chainId:this.chainId,nonce:this.nonce,gasPrice:this.gasPrice,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,accessList:this.accessList,v:e-BigInt(27),r:(0,i.bufferToBigInt)(t),s:(0,i.bufferToBigInt)(o)},a)}toJSON(){const e=c.AccessLists.getAccessListJSON(this.accessList);return{chainId:(0,i.bigIntToHex)(this.chainId),nonce:(0,i.bigIntToHex)(this.nonce),gasPrice:(0,i.bigIntToHex)(this.gasPrice),gasLimit:(0,i.bigIntToHex)(this.gasLimit),to:void 0!==this.to?this.to.toString():void 0,value:(0,i.bigIntToHex)(this.value),data:"0x"+this.data.toString("hex"),accessList:e,v:void 0!==this.v?(0,i.bigIntToHex)(this.v):void 0,r:void 0!==this.r?(0,i.bigIntToHex)(this.r):void 0,s:void 0!==this.s?(0,i.bigIntToHex)(this.s):void 0}}errorStr(){var e,t;let o=this._getSharedErrorPostfix();return o+=" gasPrice=".concat(this.gasPrice," accessListCount=").concat(null!==(e=null===(t=this.accessList)||void 0===t?void 0:t.length)&&void 0!==e?e:0),o}_errorMsg(e){return"".concat(e," (").concat(this.errorStr(),")")}}t.AccessListEIP2930Transaction=h},81051:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.normalizeTxParams=void 0;const a=o(63440);t.normalizeTxParams=e=>{var t;const o=Object.assign({},e);return o.gasLimit=(0,a.toType)(null!==(t=o.gasLimit)&&void 0!==t?t:o.gas,a.TypeOutput.BigInt),o.data=void 0===o.data?o.input:o.data,o.gasPrice=void 0!==o.gasPrice?BigInt(o.gasPrice):void 0,o.value=void 0!==o.value?BigInt(o.value):void 0,o.to=null!==o.to&&void 0!==o.to?(0,a.setLengthLeft)((0,a.toBuffer)(o.to),20):null,o.v="0x0"===o.v?"0x":o.v,o.r="0x0"===o.r?"0x":o.r,o.s="0x0"===o.s?"0x":o.s,"0x"!==o.v&&(o.v=(0,a.toType)(o.v,a.TypeOutput.BigInt)),o}},59856:function(e,t,o){var a=this&&this.__createBinding||(Object.create?function(e,t,o,a){void 0===a&&(a=o);var r=Object.getOwnPropertyDescriptor(t,o);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[o]}}),Object.defineProperty(e,a,r)}:function(e,t,o,a){void 0===a&&(a=o),e[a]=t[o]}),r=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||a(t,e,o)};Object.defineProperty(t,"__esModule",{value:!0}),t.TransactionFactory=t.Transaction=t.AccessListEIP2930Transaction=t.FeeMarketEIP1559Transaction=void 0;var i=o(39672);Object.defineProperty(t,"FeeMarketEIP1559Transaction",{enumerable:!0,get:function(){return i.FeeMarketEIP1559Transaction}});var s=o(82414);Object.defineProperty(t,"AccessListEIP2930Transaction",{enumerable:!0,get:function(){return s.AccessListEIP2930Transaction}});var n=o(62677);Object.defineProperty(t,"Transaction",{enumerable:!0,get:function(){return n.Transaction}});var c=o(9532);Object.defineProperty(t,"TransactionFactory",{enumerable:!0,get:function(){return c.TransactionFactory}}),r(o(98805),t)},62677:(e,t,o)=>{var a=o(26382).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.Transaction=void 0;const r=o(85576),i=o(63440),s=o(30994),n=o(295),c=o(98805);function d(e,t){const o=Number(e),a=2*Number(t);return o===a+35||o===a+36}class h extends n.BaseTransaction{constructor(e){var t;let o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(super({...e,type:0},o),this.common=this._validateTxV(this.v,o.common),this.gasPrice=(0,i.bufferToBigInt)((0,i.toBuffer)(""===e.gasPrice?"0x":e.gasPrice)),this.gasPrice*this.gasLimit>i.MAX_INTEGER){const e=this._errorMsg("gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)");throw new Error(e)}this._validateCannotExceedMaxInteger({gasPrice:this.gasPrice}),n.BaseTransaction._validateNotArray(e),this.common.gteHardfork("spuriousDragon")&&(this.isSigned()?d(this.v,this.common.chainId())&&this.activeCapabilities.push(c.Capability.EIP155ReplayProtection):this.activeCapabilities.push(c.Capability.EIP155ReplayProtection));(null===(t=null===o||void 0===o?void 0:o.freeze)||void 0===t||t)&&Object.freeze(this)}static fromTxData(e){return new h(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:{})}static fromSerializedTx(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const o=(0,i.arrToBufArr)(r.RLP.decode(Uint8Array.from(e)));if(!Array.isArray(o))throw new Error("Invalid serialized tx input. Must be array");return this.fromValuesArray(o,t)}static fromValuesArray(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(6!==e.length&&9!==e.length)throw new Error("Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).");const[o,a,r,s,n,c,d,f,l]=e;return(0,i.validateNoLeadingZeroes)({nonce:o,gasPrice:a,gasLimit:r,value:n,v:d,r:f,s:l}),new h({nonce:o,gasPrice:a,gasLimit:r,to:s,value:n,data:c,v:d,r:f,s:l},t)}raw(){return[(0,i.bigIntToUnpaddedBuffer)(this.nonce),(0,i.bigIntToUnpaddedBuffer)(this.gasPrice),(0,i.bigIntToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:a.from([]),(0,i.bigIntToUnpaddedBuffer)(this.value),this.data,void 0!==this.v?(0,i.bigIntToUnpaddedBuffer)(this.v):a.from([]),void 0!==this.r?(0,i.bigIntToUnpaddedBuffer)(this.r):a.from([]),void 0!==this.s?(0,i.bigIntToUnpaddedBuffer)(this.s):a.from([])]}serialize(){return a.from(r.RLP.encode((0,i.bufArrToArr)(this.raw())))}_getMessageToSign(){const e=[(0,i.bigIntToUnpaddedBuffer)(this.nonce),(0,i.bigIntToUnpaddedBuffer)(this.gasPrice),(0,i.bigIntToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:a.from([]),(0,i.bigIntToUnpaddedBuffer)(this.value),this.data];return this.supports(c.Capability.EIP155ReplayProtection)&&(e.push((0,i.bigIntToUnpaddedBuffer)(this.common.chainId())),e.push((0,i.unpadBuffer)((0,i.toBuffer)(0))),e.push((0,i.unpadBuffer)((0,i.toBuffer)(0)))),e}getMessageToSign(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];const t=this._getMessageToSign();return e?a.from((0,s.keccak256)(r.RLP.encode((0,i.bufArrToArr)(t)))):t}getDataFee(){return this.cache.dataFee&&this.cache.dataFee.hardfork===this.common.hardfork()?this.cache.dataFee.value:(Object.isFrozen(this)&&(this.cache.dataFee={value:super.getDataFee(),hardfork:this.common.hardfork()}),super.getDataFee())}getUpfrontCost(){return this.gasLimit*this.gasPrice+this.value}hash(){if(!this.isSigned()){const e=this._errorMsg("Cannot call hash method if transaction is not signed");throw new Error(e)}return Object.isFrozen(this)?(this.cache.hash||(this.cache.hash=a.from((0,s.keccak256)(r.RLP.encode((0,i.bufArrToArr)(this.raw()))))),this.cache.hash):a.from((0,s.keccak256)(r.RLP.encode((0,i.bufArrToArr)(this.raw()))))}getMessageToVerifySignature(){if(!this.isSigned()){const e=this._errorMsg("This transaction is not signed");throw new Error(e)}const e=this._getMessageToSign();return a.from((0,s.keccak256)(r.RLP.encode((0,i.bufArrToArr)(e))))}getSenderPublicKey(){const e=this.getMessageToVerifySignature(),{v:t,r:o,s:a}=this;this._validateHighS();try{return(0,i.ecrecover)(e,t,(0,i.bigIntToUnpaddedBuffer)(o),(0,i.bigIntToUnpaddedBuffer)(a),this.supports(c.Capability.EIP155ReplayProtection)?this.common.chainId():void 0)}catch(r){const e=this._errorMsg("Invalid Signature");throw new Error(e)}}_processSignature(e,t,o){this.supports(c.Capability.EIP155ReplayProtection)&&(e+=this.common.chainId()*BigInt(2)+BigInt(8));const a={...this.txOptions,common:this.common};return h.fromTxData({nonce:this.nonce,gasPrice:this.gasPrice,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,v:e,r:(0,i.bufferToBigInt)(t),s:(0,i.bufferToBigInt)(o)},a)}toJSON(){return{nonce:(0,i.bigIntToHex)(this.nonce),gasPrice:(0,i.bigIntToHex)(this.gasPrice),gasLimit:(0,i.bigIntToHex)(this.gasLimit),to:void 0!==this.to?this.to.toString():void 0,value:(0,i.bigIntToHex)(this.value),data:"0x"+this.data.toString("hex"),v:void 0!==this.v?(0,i.bigIntToHex)(this.v):void 0,r:void 0!==this.r?(0,i.bigIntToHex)(this.r):void 0,s:void 0!==this.s?(0,i.bigIntToHex)(this.s):void 0}}_validateTxV(e,t){let o;const a=void 0!==e?Number(e):void 0;if(void 0!==a&&a<37&&27!==a&&28!==a)throw new Error("Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ".concat(a));if(void 0!==a&&0!==a&&(!t||t.gteHardfork("spuriousDragon"))&&27!==a&&28!==a)if(t){if(!d(BigInt(a),t.chainId()))throw new Error("Incompatible EIP155-based V ".concat(a," and chain id ").concat(t.chainId(),". See the Common parameter of the Transaction constructor to set the chain id."))}else{let e;e=(a-35)%2===0?35:36,o=BigInt(a-e)/BigInt(2)}return this._getCommon(t,o)}errorStr(){let e=this._getSharedErrorPostfix();return e+=" gasPrice=".concat(this.gasPrice),e}_errorMsg(e){return"".concat(e," (").concat(this.errorStr(),")")}}t.Transaction=h},9532:(e,t,o)=>{var a=o(26382).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.TransactionFactory=void 0;const r=o(63440),i=o(39672),s=o(82414),n=o(81051),c=o(62677);class d{constructor(){}static fromTxData(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if("type"in e&&void 0!==e.type){const o=Number((0,r.bufferToBigInt)((0,r.toBuffer)(e.type)));if(0===o)return c.Transaction.fromTxData(e,t);if(1===o)return s.AccessListEIP2930Transaction.fromTxData(e,t);if(2===o)return i.FeeMarketEIP1559Transaction.fromTxData(e,t);throw new Error("Tx instantiation with type ".concat(o," not supported"))}return c.Transaction.fromTxData(e,t)}static fromSerializedData(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(e[0]<=127))return c.Transaction.fromSerializedTx(e,t);switch(e[0]){case 1:return s.AccessListEIP2930Transaction.fromSerializedTx(e,t);case 2:return i.FeeMarketEIP1559Transaction.fromSerializedTx(e,t);default:throw new Error("TypedTransaction with ID ".concat(e[0]," unknown"))}}static fromBlockBodyData(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(a.isBuffer(e))return this.fromSerializedData(e,t);if(Array.isArray(e))return c.Transaction.fromValuesArray(e,t);throw new Error("Cannot decode transaction: unknown type input")}static async fromEthersProvider(e,t,o){const a=(0,r.getProvider)(e),i=await(0,r.fetchFromProvider)(a,{method:"eth_getTransactionByHash",params:[t]});if(null===i)throw new Error("No data returned from provider");return d.fromRPCTx(i,o)}static async fromRPCTx(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return d.fromTxData((0,n.normalizeTxParams)(e),t)}}t.TransactionFactory=d},98805:(e,t)=>{function o(e){if(0===e.length)return!0;const t=e[0];return!!Array.isArray(t)}Object.defineProperty(t,"__esModule",{value:!0}),t.isAccessList=t.isAccessListBuffer=t.Capability=void 0,function(e){e[e.EIP155ReplayProtection=155]="EIP155ReplayProtection",e[e.EIP1559FeeMarket=1559]="EIP1559FeeMarket",e[e.EIP2718TypedTransaction=2718]="EIP2718TypedTransaction",e[e.EIP2930AccessLists=2930]="EIP2930AccessLists"}(t.Capability||(t.Capability={})),t.isAccessListBuffer=o,t.isAccessList=function(e){return!o(e)}},52954:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AccessLists=t.checkMaxInitCodeSize=void 0;const a=o(63440),r=o(98805);t.checkMaxInitCodeSize=function(e,t){const o=e.param("vm","maxInitCodeSize");if(o&&BigInt(t)>o)throw new Error("the initcode size of this transaction is too large: it is ".concat(t," while the max is ").concat(e.param("vm","maxInitCodeSize")))};t.AccessLists=class{static getAccessListData(e){let t,o;if((0,r.isAccessList)(e)){t=e;const r=[];for(let t=0;t<e.length;t++){const o=e[t],i=(0,a.toBuffer)(o.address),s=[];for(let e=0;e<o.storageKeys.length;e++)s.push((0,a.toBuffer)(o.storageKeys[e]));r.push([i,s])}o=r}else{o=null!==e&&void 0!==e?e:[];const r=[];for(let e=0;e<o.length;e++){const t=o[e],i=(0,a.bufferToHex)(t[0]),s=[];for(let e=0;e<t[1].length;e++)s.push((0,a.bufferToHex)(t[1][e]));const n={address:i,storageKeys:s};r.push(n)}t=r}return{AccessListJSON:t,accessList:o}}static verifyAccessList(e){for(let t=0;t<e.length;t++){const o=e[t],a=o[0],r=o[1];if(void 0!==o[2])throw new Error("Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.");if(20!==a.length)throw new Error("Invalid EIP-2930 transaction: address length should be 20 bytes");for(let e=0;e<r.length;e++)if(32!==r[e].length)throw new Error("Invalid EIP-2930 transaction: storage slot length should be 32 bytes")}}static getAccessListJSON(e){const t=[];for(let o=0;o<e.length;o++){const r=e[o],i={address:"0x"+(0,a.setLengthLeft)(r[0],20).toString("hex"),storageKeys:[]},s=r[1];for(let e=0;e<s.length;e++){const t=s[e];i.storageKeys.push("0x"+(0,a.setLengthLeft)(t,32).toString("hex"))}t.push(i)}return t}static getDataFeeEIP2930(e,t){const o=t.param("gasPrices","accessListStorageKeyCost"),a=t.param("gasPrices","accessListAddressCost");let r=0;for(let i=0;i<e.length;i++){r+=e[i][1].length}return e.length*Number(a)+r*Number(o)}}},10406:e=>{e.exports=JSON.parse('{"name":"goerli","chainId":5,"networkId":5,"defaultHardfork":"merge","consensus":{"type":"poa","algorithm":"clique","clique":{"period":15,"epoch":30000}},"comment":"Cross-client PoA test network","url":"https://github.com/goerli/testnet","genesis":{"timestamp":"0x5c51a607","gasLimit":10485760,"difficulty":1,"nonce":"0x0000000000000000","extraData":"0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0xa3f5ab08"},{"name":"homestead","block":0,"forkHash":"0xa3f5ab08"},{"name":"tangerineWhistle","block":0,"forkHash":"0xa3f5ab08"},{"name":"spuriousDragon","block":0,"forkHash":"0xa3f5ab08"},{"name":"byzantium","block":0,"forkHash":"0xa3f5ab08"},{"name":"constantinople","block":0,"forkHash":"0xa3f5ab08"},{"name":"petersburg","block":0,"forkHash":"0xa3f5ab08"},{"name":"istanbul","block":1561651,"forkHash":"0xc25efa5c"},{"name":"berlin","block":4460644,"forkHash":"0x757a1c47"},{"name":"london","block":5062605,"forkHash":"0xb8c6299d"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://goerli.etherscan.io/block/7382818","name":"merge","ttd":"10790000","block":7382819,"forkHash":"0xb8c6299d"},{"name":"mergeForkIdTransition","block":null,"forkHash":null},{"name":"shanghai","block":null,"timestamp":"1678832736","forkHash":"0xf9843abf"}],"bootstrapNodes":[{"ip":"51.141.78.53","port":30303,"id":"011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a","location":"","comment":"Upstream bootnode 1"},{"ip":"13.93.54.137","port":30303,"id":"176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b","location":"","comment":"Upstream bootnode 2"},{"ip":"94.237.54.114","port":30313,"id":"46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291","location":"","comment":"Upstream bootnode 3"},{"ip":"18.218.250.66","port":30313,"id":"b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949","location":"","comment":"Upstream bootnode 4"},{"ip":"3.11.147.67","port":30303,"id":"a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91","location":"","comment":"Ethereum Foundation bootnode"},{"ip":"51.15.116.226","port":30303,"id":"a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd","location":"","comment":"Goerli Initiative bootnode"},{"ip":"51.15.119.157","port":30303,"id":"807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33","location":"","comment":"Goerli Initiative bootnode"},{"ip":"51.15.119.157","port":40303,"id":"a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd","location":"","comment":"Goerli Initiative bootnode"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net"]}')},12336:e=>{e.exports=JSON.parse('{"name":"mainnet","chainId":1,"networkId":1,"defaultHardfork":"merge","consensus":{"type":"pow","algorithm":"ethash","ethash":{}},"comment":"The Ethereum main chain","url":"https://ethstats.net/","genesis":{"gasLimit":5000,"difficulty":17179869184,"nonce":"0x0000000000000042","extraData":"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0xfc64ec04"},{"name":"homestead","block":1150000,"forkHash":"0x97c2c34c"},{"name":"dao","block":1920000,"forkHash":"0x91d1f948"},{"name":"tangerineWhistle","block":2463000,"forkHash":"0x7a64da13"},{"name":"spuriousDragon","block":2675000,"forkHash":"0x3edd5b10"},{"name":"byzantium","block":4370000,"forkHash":"0xa00bc324"},{"name":"constantinople","block":7280000,"forkHash":"0x668db0af"},{"name":"petersburg","block":7280000,"forkHash":"0x668db0af"},{"name":"istanbul","block":9069000,"forkHash":"0x879d6e30"},{"name":"muirGlacier","block":9200000,"forkHash":"0xe029e991"},{"name":"berlin","block":12244000,"forkHash":"0x0eb440f6"},{"name":"london","block":12965000,"forkHash":"0xb715077d"},{"name":"arrowGlacier","block":13773000,"forkHash":"0x20c327fc"},{"name":"grayGlacier","block":15050000,"forkHash":"0xf0afd0e3"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://etherscan.io/block/15537393","name":"merge","ttd":"58750000000000000000000","block":15537394,"forkHash":"0xf0afd0e3"},{"name":"mergeForkIdTransition","block":null,"forkHash":null},{"name":"shanghai","block":null,"timestamp":"1681338455","forkHash":"0xdce96c2d"}],"bootstrapNodes":[{"ip":"18.138.108.67","port":30303,"id":"d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666","location":"ap-southeast-1-001","comment":"bootnode-aws-ap-southeast-1-001"},{"ip":"3.209.45.79","port":30303,"id":"22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de","location":"us-east-1-001","comment":"bootnode-aws-us-east-1-001"},{"ip":"65.108.70.101","port":30303,"id":"2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc","location":"eu-west-1-001","comment":"bootnode-hetzner-hel"},{"ip":"157.90.35.166","port":30303,"id":"4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052","location":"eu-central-1-001","comment":"bootnode-hetzner-fsn"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net"]}')},17280:e=>{e.exports=JSON.parse('{"name":"rinkeby","chainId":4,"networkId":4,"defaultHardfork":"london","consensus":{"type":"poa","algorithm":"clique","clique":{"period":15,"epoch":30000}},"comment":"PoA test network","url":"https://www.rinkeby.io","genesis":{"timestamp":"0x58ee40ba","gasLimit":4700000,"difficulty":1,"nonce":"0x0000000000000000","extraData":"0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0x3b8e0691"},{"name":"homestead","block":1,"forkHash":"0x60949295"},{"name":"tangerineWhistle","block":2,"forkHash":"0x8bde40dd"},{"name":"spuriousDragon","block":3,"forkHash":"0xcb3a64bb"},{"name":"byzantium","block":1035301,"forkHash":"0x8d748b57"},{"name":"constantinople","block":3660663,"forkHash":"0xe49cab14"},{"name":"petersburg","block":4321234,"forkHash":"0xafec6b27"},{"name":"istanbul","block":5435345,"forkHash":"0xcbdb8838"},{"name":"berlin","block":8290928,"forkHash":"0x6910c8bd"},{"name":"london","block":8897988,"forkHash":"0x8e29f2f3"},{"name":"merge","block":null,"forkHash":null},{"name":"shanghai","block":null,"forkHash":null}],"bootstrapNodes":[{"ip":"52.169.42.101","port":30303,"id":"a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf","location":"","comment":"IE"},{"ip":"52.3.158.184","port":30303,"id":"343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8","location":"","comment":"INFURA"},{"ip":"159.89.28.211","port":30303,"id":"b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6","location":"","comment":"AKASHA"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.rinkeby.ethdisco.net"]}')},13737:e=>{e.exports=JSON.parse('{"name":"ropsten","chainId":3,"networkId":3,"defaultHardfork":"merge","consensus":{"type":"pow","algorithm":"ethash","ethash":{}},"comment":"PoW test network","url":"https://github.com/ethereum/ropsten","genesis":{"gasLimit":16777216,"difficulty":1048576,"nonce":"0x0000000000000042","extraData":"0x3535353535353535353535353535353535353535353535353535353535353535"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0x30c7ddbc"},{"name":"homestead","block":0,"forkHash":"0x30c7ddbc"},{"name":"tangerineWhistle","block":0,"forkHash":"0x30c7ddbc"},{"name":"spuriousDragon","block":10,"forkHash":"0x63760190"},{"name":"byzantium","block":1700000,"forkHash":"0x3ea159c7"},{"name":"constantinople","block":4230000,"forkHash":"0x97b544f3"},{"name":"petersburg","block":4939394,"forkHash":"0xd6e2149b"},{"name":"istanbul","block":6485846,"forkHash":"0x4bc66396"},{"name":"muirGlacier","block":7117117,"forkHash":"0x6727ef90"},{"name":"berlin","block":9812189,"forkHash":"0xa157d377"},{"name":"london","block":10499401,"forkHash":"0x7119b6b3"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge","name":"merge","ttd":"50000000000000000","block":null,"forkHash":"0x7119b6b3"},{"name":"mergeForkIdTransition","block":null,"forkHash":null},{"name":"shanghai","block":null,"forkHash":null}],"bootstrapNodes":[{"ip":"52.176.7.10","port":30303,"id":"30b7ab30a01c124a6cceca36863ece12c4f5fa68e3ba9b0b51407ccc002eeed3b3102d20a88f1c1d3c3154e2449317b8ef95090e77b312d5cc39354f86d5d606","location":"","comment":"US-Azure geth"},{"ip":"52.176.100.77","port":30303,"id":"865a63255b3bb68023b6bffd5095118fcc13e79dcf014fe4e47e065c350c7cc72af2e53eff895f11ba1bbb6a2b33271c1116ee870f266618eadfc2e78aa7349c","location":"","comment":"US-Azure parity"},{"ip":"52.232.243.152","port":30303,"id":"6332792c4a00e3e4ee0926ed89e0d27ef985424d97b6a45bf0f23e51f0dcb5e66b875777506458aea7af6f9e4ffb69f43f3778ee73c81ed9d34c51c4b16b0b0f","location":"","comment":"Parity"},{"ip":"192.81.208.223","port":30303,"id":"94c15d1b9e2fe7ce56e458b9a3b672ef11894ddedd0c6f247e0f1d3487f52b66208fb4aeb8179fce6e3a749ea93ed147c37976d67af557508d199d9594c35f09","location":"","comment":"@gpip"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.ropsten.ethdisco.net"]}')},14429:e=>{e.exports=JSON.parse('{"name":"sepolia","chainId":11155111,"networkId":11155111,"defaultHardfork":"merge","consensus":{"type":"pow","algorithm":"ethash","ethash":{}},"comment":"PoW test network to replace Ropsten","url":"https://github.com/ethereum/go-ethereum/pull/23730","genesis":{"timestamp":"0x6159af19","gasLimit":30000000,"difficulty":131072,"nonce":"0x0000000000000000","extraData":"0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0xfe3366e7"},{"name":"homestead","block":0,"forkHash":"0xfe3366e7"},{"name":"tangerineWhistle","block":0,"forkHash":"0xfe3366e7"},{"name":"spuriousDragon","block":0,"forkHash":"0xfe3366e7"},{"name":"byzantium","block":0,"forkHash":"0xfe3366e7"},{"name":"constantinople","block":0,"forkHash":"0xfe3366e7"},{"name":"petersburg","block":0,"forkHash":"0xfe3366e7"},{"name":"istanbul","block":0,"forkHash":"0xfe3366e7"},{"name":"muirGlacier","block":0,"forkHash":"0xfe3366e7"},{"name":"berlin","block":0,"forkHash":"0xfe3366e7"},{"name":"london","block":0,"forkHash":"0xfe3366e7"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://sepolia.etherscan.io/block/1450408","name":"merge","ttd":"17000000000000000","block":1450409,"forkHash":"0xfe3366e7"},{"name":"mergeForkIdTransition","block":1735371,"forkHash":"0xb96cbd13"},{"name":"shanghai","block":null,"timestamp":"1677557088","forkHash":"0xf7f9bc08"}],"bootstrapNodes":[{"ip":"18.168.182.86","port":30303,"id":"9246d00bc8fd1742e5ad2428b80fc4dc45d786283e05ef6edbd9002cbc335d40998444732fbe921cb88e1d2c73d1b1de53bae6a2237996e9bfe14f871baf7066","location":"","comment":"geth"},{"ip":"52.14.151.177","port":30303,"id":"ec66ddcf1a974950bd4c782789a7e04f8aa7110a72569b6e65fcd51e937e74eed303b1ea734e4d19cfaec9fbff9b6ee65bf31dcb50ba79acce9dd63a6aca61c7","location":"","comment":"besu"},{"ip":"165.22.196.173","port":30303,"id":"ce970ad2e9daa9e14593de84a8b49da3d54ccfdf83cbc4fe519cb8b36b5918ed4eab087dedd4a62479b8d50756b492d5f762367c8d20329a7854ec01547568a6","location":"","comment":"EF"},{"ip":"65.108.95.67","port":30303,"id":"075503b13ed736244896efcde2a992ec0b451357d46cb7a8132c0384721742597fc8f0d91bbb40bb52e7d6e66728d36a1fda09176294e4a30cfac55dcce26bc6","location":"","comment":"lodestar"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net"]}')},42973:e=>{e.exports=JSON.parse('{"name":"EIP-1153","number":1153,"comment":"Transient Storage","url":"https://eips.ethereum.org/EIPS/eip-1153","status":"Review","minimumHardfork":"chainstart","requiredEIPs":[],"gasConfig":{},"gasPrices":{"tstore":{"v":100,"d":"Base fee of the TSTORE opcode"},"tload":{"v":100,"d":"Base fee of the TLOAD opcode"}},"vm":{},"pow":{}}')},23031:e=>{e.exports=JSON.parse('{"name":"EIP-1559","number":1559,"comment":"Fee market change for ETH 1.0 chain","url":"https://eips.ethereum.org/EIPS/eip-1559","status":"Final","minimumHardfork":"berlin","requiredEIPs":[2930],"gasConfig":{"baseFeeMaxChangeDenominator":{"v":8,"d":"Maximum base fee change denominator"},"elasticityMultiplier":{"v":2,"d":"Maximum block gas target elasticity"},"initialBaseFee":{"v":1000000000,"d":"Initial base fee on first EIP1559 block"}},"gasPrices":{},"vm":{},"pow":{}}')},14918:e=>{e.exports=JSON.parse('{"name":"EIP-2315","number":2315,"comment":"Simple subroutines for the EVM","url":"https://eips.ethereum.org/EIPS/eip-2315","status":"Draft","minimumHardfork":"istanbul","gasConfig":{},"gasPrices":{"beginsub":{"v":2,"d":"Base fee of the BEGINSUB opcode"},"returnsub":{"v":5,"d":"Base fee of the RETURNSUB opcode"},"jumpsub":{"v":10,"d":"Base fee of the JUMPSUB opcode"}},"vm":{},"pow":{}}')},86284:e=>{e.exports=JSON.parse('{"name":"EIP-2537","number":2537,"comment":"BLS12-381 precompiles","url":"https://eips.ethereum.org/EIPS/eip-2537","status":"Draft","minimumHardfork":"chainstart","gasConfig":{},"gasPrices":{"Bls12381G1AddGas":{"v":600,"d":"Gas cost of a single BLS12-381 G1 addition precompile-call"},"Bls12381G1MulGas":{"v":12000,"d":"Gas cost of a single BLS12-381 G1 multiplication precompile-call"},"Bls12381G2AddGas":{"v":4500,"d":"Gas cost of a single BLS12-381 G2 addition precompile-call"},"Bls12381G2MulGas":{"v":55000,"d":"Gas cost of a single BLS12-381 G2 multiplication precompile-call"},"Bls12381PairingBaseGas":{"v":115000,"d":"Base gas cost of BLS12-381 pairing check"},"Bls12381PairingPerPairGas":{"v":23000,"d":"Per-pair gas cost of BLS12-381 pairing check"},"Bls12381MapG1Gas":{"v":5500,"d":"Gas cost of BLS12-381 map field element to G1"},"Bls12381MapG2Gas":{"v":110000,"d":"Gas cost of BLS12-381 map field element to G2"},"Bls12381MultiExpGasDiscount":{"v":[[1,1200],[2,888],[3,764],[4,641],[5,594],[6,547],[7,500],[8,453],[9,438],[10,423],[11,408],[12,394],[13,379],[14,364],[15,349],[16,334],[17,330],[18,326],[19,322],[20,318],[21,314],[22,310],[23,306],[24,302],[25,298],[26,294],[27,289],[28,285],[29,281],[30,277],[31,273],[32,269],[33,268],[34,266],[35,265],[36,263],[37,262],[38,260],[39,259],[40,257],[41,256],[42,254],[43,253],[44,251],[45,250],[46,248],[47,247],[48,245],[49,244],[50,242],[51,241],[52,239],[53,238],[54,236],[55,235],[56,233],[57,232],[58,231],[59,229],[60,228],[61,226],[62,225],[63,223],[64,222],[65,221],[66,220],[67,219],[68,219],[69,218],[70,217],[71,216],[72,216],[73,215],[74,214],[75,213],[76,213],[77,212],[78,211],[79,211],[80,210],[81,209],[82,208],[83,208],[84,207],[85,206],[86,205],[87,205],[88,204],[89,203],[90,202],[91,202],[92,201],[93,200],[94,199],[95,199],[96,198],[97,197],[98,196],[99,196],[100,195],[101,194],[102,193],[103,193],[104,192],[105,191],[106,191],[107,190],[108,189],[109,188],[110,188],[111,187],[112,186],[113,185],[114,185],[115,184],[116,183],[117,182],[118,182],[119,181],[120,180],[121,179],[122,179],[123,178],[124,177],[125,176],[126,176],[127,175],[128,174]],"d":"Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair"}},"vm":{},"pow":{}}')},78315:e=>{e.exports=JSON.parse('{"name":"EIP-2565","number":2565,"comment":"ModExp gas cost","url":"https://eips.ethereum.org/EIPS/eip-2565","status":"Final","minimumHardfork":"byzantium","gasConfig":{},"gasPrices":{"modexpGquaddivisor":{"v":3,"d":"Gquaddivisor from modexp precompile for gas calculation"}},"vm":{},"pow":{}}')},61417:e=>{e.exports=JSON.parse('{"name":"EIP-2718","comment":"Typed Transaction Envelope","url":"https://eips.ethereum.org/EIPS/eip-2718","status":"Final","minimumHardfork":"chainstart","gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},76967:e=>{e.exports=JSON.parse('{"name":"EIP-2929","comment":"Gas cost increases for state access opcodes","url":"https://eips.ethereum.org/EIPS/eip-2929","status":"Final","minimumHardfork":"chainstart","gasConfig":{},"gasPrices":{"coldsload":{"v":2100,"d":"Gas cost of the first read of storage from a given location (per transaction)"},"coldaccountaccess":{"v":2600,"d":"Gas cost of the first read of a given address (per transaction)"},"warmstorageread":{"v":100,"d":"Gas cost of reading storage locations which have already loaded \'cold\'"},"sstoreCleanGasEIP2200":{"v":2900,"d":"Once per SSTORE operation from clean non-zero to something else"},"sstoreNoopGasEIP2200":{"v":100,"d":"Once per SSTORE operation if the value doesn\'t change"},"sstoreDirtyGasEIP2200":{"v":100,"d":"Once per SSTORE operation if a dirty value is changed"},"sstoreInitRefundEIP2200":{"v":19900,"d":"Once per SSTORE operation for resetting to the original zero value"},"sstoreCleanRefundEIP2200":{"v":4900,"d":"Once per SSTORE operation for resetting to the original non-zero value"},"call":{"v":0,"d":"Base fee of the CALL opcode"},"callcode":{"v":0,"d":"Base fee of the CALLCODE opcode"},"delegatecall":{"v":0,"d":"Base fee of the DELEGATECALL opcode"},"staticcall":{"v":0,"d":"Base fee of the STATICCALL opcode"},"balance":{"v":0,"d":"Base fee of the BALANCE opcode"},"extcodesize":{"v":0,"d":"Base fee of the EXTCODESIZE opcode"},"extcodecopy":{"v":0,"d":"Base fee of the EXTCODECOPY opcode"},"extcodehash":{"v":0,"d":"Base fee of the EXTCODEHASH opcode"},"sload":{"v":0,"d":"Base fee of the SLOAD opcode"},"sstore":{"v":0,"d":"Base fee of the SSTORE opcode"}},"vm":{},"pow":{}}')},67577:e=>{e.exports=JSON.parse('{"name":"EIP-2930","comment":"Optional access lists","url":"https://eips.ethereum.org/EIPS/eip-2930","status":"Final","minimumHardfork":"istanbul","requiredEIPs":[2718,2929],"gasConfig":{},"gasPrices":{"accessListStorageKeyCost":{"v":1900,"d":"Gas cost per storage key in an Access List transaction"},"accessListAddressCost":{"v":2400,"d":"Gas cost per storage key in an Access List transaction"}},"vm":{},"pow":{}}')},46475:e=>{e.exports=JSON.parse('{"name":"EIP-3074","number":3074,"comment":"AUTH and AUTHCALL opcodes","url":"https://eips.ethereum.org/EIPS/eip-3074","status":"Review","minimumHardfork":"london","gasConfig":{},"gasPrices":{"auth":{"v":3100,"d":"Gas cost of the AUTH opcode"},"authcall":{"v":0,"d":"Gas cost of the AUTHCALL opcode"},"authcallValueTransfer":{"v":6700,"d":"Paid for CALL when the value transfer is non-zero"}},"vm":{},"pow":{}}')},48542:e=>{e.exports=JSON.parse('{"name":"EIP-3198","number":3198,"comment":"BASEFEE opcode","url":"https://eips.ethereum.org/EIPS/eip-3198","status":"Final","minimumHardfork":"london","gasConfig":{},"gasPrices":{"basefee":{"v":2,"d":"Gas cost of the BASEFEE opcode"}},"vm":{},"pow":{}}')},77294:e=>{e.exports=JSON.parse('{"name":"EIP-3529","comment":"Reduction in refunds","url":"https://eips.ethereum.org/EIPS/eip-3529","status":"Final","minimumHardfork":"berlin","requiredEIPs":[2929],"gasConfig":{"maxRefundQuotient":{"v":5,"d":"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"}},"gasPrices":{"selfdestructRefund":{"v":0,"d":"Refunded following a selfdestruct operation"},"sstoreClearRefundEIP2200":{"v":4800,"d":"Once per SSTORE operation for clearing an originally existing storage slot"}},"vm":{},"pow":{}}')},331:e=>{e.exports=JSON.parse('{"name":"EIP-3540","number":3540,"comment":"EVM Object Format (EOF) v1","url":"https://eips.ethereum.org/EIPS/eip-3540","status":"Review","minimumHardfork":"london","requiredEIPs":[3541],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},91464:e=>{e.exports=JSON.parse('{"name":"EIP-3541","comment":"Reject new contracts starting with the 0xEF byte","url":"https://eips.ethereum.org/EIPS/eip-3541","status":"Final","minimumHardfork":"berlin","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},44298:e=>{e.exports=JSON.parse('{"name":"EIP-3554","comment":"Reduction in refunds","url":"Difficulty Bomb Delay to December 1st 2021","status":"Final","minimumHardfork":"muirGlacier","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":9500000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},45515:e=>{e.exports=JSON.parse('{"name":"EIP-3607","number":3607,"comment":"Reject transactions from senders with deployed code","url":"https://eips.ethereum.org/EIPS/eip-3607","status":"Final","minimumHardfork":"chainstart","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},77436:e=>{e.exports=JSON.parse('{"name":"EIP-3651","number":3198,"comment":"Warm COINBASE","url":"https://eips.ethereum.org/EIPS/eip-3651","status":"Review","minimumHardfork":"london","requiredEIPs":[2929],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},75569:e=>{e.exports=JSON.parse('{"name":"EIP-3670","number":3670,"comment":"EOF - Code Validation","url":"https://eips.ethereum.org/EIPS/eip-3670","status":"Review","minimumHardfork":"london","requiredEIPs":[3540],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},31770:e=>{e.exports=JSON.parse('{"name":"EIP-3675","number":3675,"comment":"Upgrade consensus to Proof-of-Stake","url":"https://eips.ethereum.org/EIPS/eip-3675","status":"Final","minimumHardfork":"london","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},57610:e=>{e.exports=JSON.parse('{"name":"EIP-3855","number":3855,"comment":"PUSH0 instruction","url":"https://eips.ethereum.org/EIPS/eip-3855","status":"Review","minimumHardfork":"chainstart","requiredEIPs":[],"gasConfig":{},"gasPrices":{"push0":{"v":2,"d":"Base fee of the PUSH0 opcode"}},"vm":{},"pow":{}}')},58842:e=>{e.exports=JSON.parse('{"name":"EIP-3860","number":3860,"comment":"Limit and meter initcode","url":"https://eips.ethereum.org/EIPS/eip-3860","status":"Review","minimumHardfork":"spuriousDragon","requiredEIPs":[],"gasConfig":{},"gasPrices":{"initCodeWordCost":{"v":2,"d":"Gas to pay for each word (32 bytes) of initcode when creating a contract"}},"vm":{"maxInitCodeSize":{"v":49152,"d":"Maximum length of initialization code when creating a contract"}},"pow":{}}')},86865:e=>{e.exports=JSON.parse('{"name":"EIP-4345","number":4345,"comment":"Difficulty Bomb Delay to June 2022","url":"https://eips.ethereum.org/EIPS/eip-4345","status":"Final","minimumHardfork":"london","gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":10700000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},75160:e=>{e.exports=JSON.parse('{"name":"EIP-4399","number":4399,"comment":"Supplant DIFFICULTY opcode with PREVRANDAO","url":"https://eips.ethereum.org/EIPS/eip-4399","status":"Review","minimumHardfork":"london","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},76111:e=>{e.exports=JSON.parse('{"name":"EIP-4844","number":4844,"comment":"Shard Blob Transactions","url":"https://eips.ethereum.org/EIPS/eip-4844","status":"Draft","minimumHardfork":"merge","requiredEIPs":[1559,2718,2930,4895],"gasConfig":{"dataGasPerBlob":{"v":131072,"d":"The base fee for data gas per blob"},"targetDataGasPerBlock":{"v":262144,"d":"The target data gas consumed per block"},"maxDataGasPerBlock":{"v":524288,"d":"The max data gas allowable per block"},"dataGasPriceUpdateFraction":{"v":2225652,"d":"The denominator used in the exponential when calculating a data gas price"}},"gasPrices":{"simpleGasPerBlob":{"v":12000,"d":"The basic gas fee for each blob"},"minDataGasPrice":{"v":1,"d":"The minimum fee per data gas"},"kzgPointEvaluationGasPrecompilePrice":{"v":50000,"d":"The fee associated with the point evaluation precompile"},"datahash":{"v":3,"d":"Base fee of the DATAHASH opcode"}},"sharding":{"blobCommitmentVersionKzg":{"v":1,"d":"The number indicated a versioned hash is a KZG commitment"},"fieldElementsPerBlob":{"v":4096,"d":"The number of field elements allowed per blob"}},"vm":{},"pow":{}}')},63025:e=>{e.exports=JSON.parse('{"name":"EIP-4895","number":4895,"comment":"Beacon chain push withdrawals as operations","url":"https://eips.ethereum.org/EIPS/eip-4895","status":"Review","minimumHardfork":"merge","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},62047:e=>{e.exports=JSON.parse('{"name":"EIP-5133","number":5133,"comment":"Delaying Difficulty Bomb to mid-September 2022","url":"https://eips.ethereum.org/EIPS/eip-5133","status":"Draft","minimumHardfork":"grayGlacier","gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":11400000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},94164:e=>{e.exports=JSON.parse('{"name":"arrowGlacier","comment":"HF to delay the difficulty bomb","url":"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md","status":"Final","eips":[4345],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},72094:e=>{e.exports=JSON.parse('{"name":"berlin","comment":"HF targeted for July 2020 following the Muir Glacier HF","url":"https://eips.ethereum.org/EIPS/eip-2070","status":"Final","eips":[2565,2929,2718,2930]}')},13821:e=>{e.exports=JSON.parse('{"name":"byzantium","comment":"Hardfork with new precompiles, instructions and other protocol changes","url":"https://eips.ethereum.org/EIPS/eip-609","status":"Final","gasConfig":{},"gasPrices":{"modexpGquaddivisor":{"v":20,"d":"Gquaddivisor from modexp precompile for gas calculation"},"ecAdd":{"v":500,"d":"Gas costs for curve addition precompile"},"ecMul":{"v":40000,"d":"Gas costs for curve multiplication precompile"},"ecPairing":{"v":100000,"d":"Base gas costs for curve pairing precompile"},"ecPairingWord":{"v":80000,"d":"Gas costs regarding curve pairing precompile input length"},"revert":{"v":0,"d":"Base fee of the REVERT opcode"},"staticcall":{"v":700,"d":"Base fee of the STATICCALL opcode"},"returndatasize":{"v":2,"d":"Base fee of the RETURNDATASIZE opcode"},"returndatacopy":{"v":3,"d":"Base fee of the RETURNDATACOPY opcode"}},"vm":{},"pow":{"minerReward":{"v":"3000000000000000000","d":"the amount a miner get rewarded for mining a block"},"difficultyBombDelay":{"v":3000000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},61497:e=>{e.exports=JSON.parse('{"name":"chainstart","comment":"Start of the Ethereum main chain","url":"","status":"","gasConfig":{"minGasLimit":{"v":5000,"d":"Minimum the gas limit may ever be"},"gasLimitBoundDivisor":{"v":1024,"d":"The bound divisor of the gas limit, used in update calculations"},"maxRefundQuotient":{"v":2,"d":"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"}},"gasPrices":{"base":{"v":2,"d":"Gas base cost, used e.g. for ChainID opcode (Istanbul)"},"tierStep":{"v":[0,2,3,5,8,10,20],"d":"Once per operation, for a selection of them"},"exp":{"v":10,"d":"Base fee of the EXP opcode"},"expByte":{"v":10,"d":"Times ceil(log256(exponent)) for the EXP instruction"},"sha3":{"v":30,"d":"Base fee of the SHA3 opcode"},"sha3Word":{"v":6,"d":"Once per word of the SHA3 operation\'s data"},"sload":{"v":50,"d":"Base fee of the SLOAD opcode"},"sstoreSet":{"v":20000,"d":"Once per SSTORE operation if the zeroness changes from zero"},"sstoreReset":{"v":5000,"d":"Once per SSTORE operation if the zeroness does not change from zero"},"sstoreRefund":{"v":15000,"d":"Once per SSTORE operation if the zeroness changes to zero"},"jumpdest":{"v":1,"d":"Base fee of the JUMPDEST opcode"},"log":{"v":375,"d":"Base fee of the LOG opcode"},"logData":{"v":8,"d":"Per byte in a LOG* operation\'s data"},"logTopic":{"v":375,"d":"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas"},"create":{"v":32000,"d":"Base fee of the CREATE opcode"},"call":{"v":40,"d":"Base fee of the CALL opcode"},"callStipend":{"v":2300,"d":"Free gas given at beginning of call"},"callValueTransfer":{"v":9000,"d":"Paid for CALL when the value transfor is non-zero"},"callNewAccount":{"v":25000,"d":"Paid for CALL when the destination address didn\'t exist prior"},"selfdestructRefund":{"v":24000,"d":"Refunded following a selfdestruct operation"},"memory":{"v":3,"d":"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL"},"quadCoeffDiv":{"v":512,"d":"Divisor for the quadratic particle of the memory cost equation"},"createData":{"v":200,"d":""},"tx":{"v":21000,"d":"Per transaction. NOTE: Not payable on data of calls between transactions"},"txCreation":{"v":32000,"d":"The cost of creating a contract via tx"},"txDataZero":{"v":4,"d":"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions"},"txDataNonZero":{"v":68,"d":"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"},"copy":{"v":3,"d":"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added"},"ecRecover":{"v":3000,"d":""},"sha256":{"v":60,"d":""},"sha256Word":{"v":12,"d":""},"ripemd160":{"v":600,"d":""},"ripemd160Word":{"v":120,"d":""},"identity":{"v":15,"d":""},"identityWord":{"v":3,"d":""},"stop":{"v":0,"d":"Base fee of the STOP opcode"},"add":{"v":3,"d":"Base fee of the ADD opcode"},"mul":{"v":5,"d":"Base fee of the MUL opcode"},"sub":{"v":3,"d":"Base fee of the SUB opcode"},"div":{"v":5,"d":"Base fee of the DIV opcode"},"sdiv":{"v":5,"d":"Base fee of the SDIV opcode"},"mod":{"v":5,"d":"Base fee of the MOD opcode"},"smod":{"v":5,"d":"Base fee of the SMOD opcode"},"addmod":{"v":8,"d":"Base fee of the ADDMOD opcode"},"mulmod":{"v":8,"d":"Base fee of the MULMOD opcode"},"signextend":{"v":5,"d":"Base fee of the SIGNEXTEND opcode"},"lt":{"v":3,"d":"Base fee of the LT opcode"},"gt":{"v":3,"d":"Base fee of the GT opcode"},"slt":{"v":3,"d":"Base fee of the SLT opcode"},"sgt":{"v":3,"d":"Base fee of the SGT opcode"},"eq":{"v":3,"d":"Base fee of the EQ opcode"},"iszero":{"v":3,"d":"Base fee of the ISZERO opcode"},"and":{"v":3,"d":"Base fee of the AND opcode"},"or":{"v":3,"d":"Base fee of the OR opcode"},"xor":{"v":3,"d":"Base fee of the XOR opcode"},"not":{"v":3,"d":"Base fee of the NOT opcode"},"byte":{"v":3,"d":"Base fee of the BYTE opcode"},"address":{"v":2,"d":"Base fee of the ADDRESS opcode"},"balance":{"v":20,"d":"Base fee of the BALANCE opcode"},"origin":{"v":2,"d":"Base fee of the ORIGIN opcode"},"caller":{"v":2,"d":"Base fee of the CALLER opcode"},"callvalue":{"v":2,"d":"Base fee of the CALLVALUE opcode"},"calldataload":{"v":3,"d":"Base fee of the CALLDATALOAD opcode"},"calldatasize":{"v":2,"d":"Base fee of the CALLDATASIZE opcode"},"calldatacopy":{"v":3,"d":"Base fee of the CALLDATACOPY opcode"},"codesize":{"v":2,"d":"Base fee of the CODESIZE opcode"},"codecopy":{"v":3,"d":"Base fee of the CODECOPY opcode"},"gasprice":{"v":2,"d":"Base fee of the GASPRICE opcode"},"extcodesize":{"v":20,"d":"Base fee of the EXTCODESIZE opcode"},"extcodecopy":{"v":20,"d":"Base fee of the EXTCODECOPY opcode"},"blockhash":{"v":20,"d":"Base fee of the BLOCKHASH opcode"},"coinbase":{"v":2,"d":"Base fee of the COINBASE opcode"},"timestamp":{"v":2,"d":"Base fee of the TIMESTAMP opcode"},"number":{"v":2,"d":"Base fee of the NUMBER opcode"},"difficulty":{"v":2,"d":"Base fee of the DIFFICULTY opcode"},"gaslimit":{"v":2,"d":"Base fee of the GASLIMIT opcode"},"pop":{"v":2,"d":"Base fee of the POP opcode"},"mload":{"v":3,"d":"Base fee of the MLOAD opcode"},"mstore":{"v":3,"d":"Base fee of the MSTORE opcode"},"mstore8":{"v":3,"d":"Base fee of the MSTORE8 opcode"},"sstore":{"v":0,"d":"Base fee of the SSTORE opcode"},"jump":{"v":8,"d":"Base fee of the JUMP opcode"},"jumpi":{"v":10,"d":"Base fee of the JUMPI opcode"},"pc":{"v":2,"d":"Base fee of the PC opcode"},"msize":{"v":2,"d":"Base fee of the MSIZE opcode"},"gas":{"v":2,"d":"Base fee of the GAS opcode"},"push":{"v":3,"d":"Base fee of the PUSH opcode"},"dup":{"v":3,"d":"Base fee of the DUP opcode"},"swap":{"v":3,"d":"Base fee of the SWAP opcode"},"callcode":{"v":40,"d":"Base fee of the CALLCODE opcode"},"return":{"v":0,"d":"Base fee of the RETURN opcode"},"invalid":{"v":0,"d":"Base fee of the INVALID opcode"},"selfdestruct":{"v":0,"d":"Base fee of the SELFDESTRUCT opcode"}},"vm":{"stackLimit":{"v":1024,"d":"Maximum size of VM stack allowed"},"callCreateDepth":{"v":1024,"d":"Maximum depth of call/create stack"},"maxExtraDataSize":{"v":32,"d":"Maximum size extra data may be after Genesis"}},"pow":{"minimumDifficulty":{"v":131072,"d":"The minimum that the difficulty may ever be"},"difficultyBoundDivisor":{"v":2048,"d":"The bound divisor of the difficulty, used in the update calculations"},"durationLimit":{"v":13,"d":"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not"},"epochDuration":{"v":30000,"d":"Duration between proof-of-work epochs"},"timebombPeriod":{"v":100000,"d":"Exponential difficulty timebomb period"},"minerReward":{"v":"5000000000000000000","d":"the amount a miner get rewarded for mining a block"},"difficultyBombDelay":{"v":0,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},88593:e=>{e.exports=JSON.parse('{"name":"constantinople","comment":"Postponed hardfork including EIP-1283 (SSTORE gas metering changes)","url":"https://eips.ethereum.org/EIPS/eip-1013","status":"Final","gasConfig":{},"gasPrices":{"netSstoreNoopGas":{"v":200,"d":"Once per SSTORE operation if the value doesn\'t change"},"netSstoreInitGas":{"v":20000,"d":"Once per SSTORE operation from clean zero"},"netSstoreCleanGas":{"v":5000,"d":"Once per SSTORE operation from clean non-zero"},"netSstoreDirtyGas":{"v":200,"d":"Once per SSTORE operation from dirty"},"netSstoreClearRefund":{"v":15000,"d":"Once per SSTORE operation for clearing an originally existing storage slot"},"netSstoreResetRefund":{"v":4800,"d":"Once per SSTORE operation for resetting to the original non-zero value"},"netSstoreResetClearRefund":{"v":19800,"d":"Once per SSTORE operation for resetting to the original zero value"},"shl":{"v":3,"d":"Base fee of the SHL opcode"},"shr":{"v":3,"d":"Base fee of the SHR opcode"},"sar":{"v":3,"d":"Base fee of the SAR opcode"},"extcodehash":{"v":400,"d":"Base fee of the EXTCODEHASH opcode"},"create2":{"v":32000,"d":"Base fee of the CREATE2 opcode"}},"vm":{},"pow":{"minerReward":{"v":"2000000000000000000","d":"The amount a miner gets rewarded for mining a block"},"difficultyBombDelay":{"v":5000000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},27582:e=>{e.exports=JSON.parse('{"name":"dao","comment":"DAO rescue hardfork","url":"https://eips.ethereum.org/EIPS/eip-779","status":"Final","gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},62386:e=>{e.exports=JSON.parse('{"name":"grayGlacier","comment":"Delaying the difficulty bomb to Mid September 2022","url":"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md","status":"Draft","eips":[5133],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},9448:e=>{e.exports=JSON.parse('{"name":"homestead","comment":"Homestead hardfork with protocol and network changes","url":"https://eips.ethereum.org/EIPS/eip-606","status":"Final","gasConfig":{},"gasPrices":{"delegatecall":{"v":40,"d":"Base fee of the DELEGATECALL opcode"}},"vm":{},"pow":{}}')},77e3:e=>{e.exports=JSON.parse('{"name":"istanbul","comment":"HF targeted for December 2019 following the Constantinople/Petersburg HF","url":"https://eips.ethereum.org/EIPS/eip-1679","status":"Final","gasConfig":{},"gasPrices":{"blake2Round":{"v":1,"d":"Gas cost per round for the Blake2 F precompile"},"ecAdd":{"v":150,"d":"Gas costs for curve addition precompile"},"ecMul":{"v":6000,"d":"Gas costs for curve multiplication precompile"},"ecPairing":{"v":45000,"d":"Base gas costs for curve pairing precompile"},"ecPairingWord":{"v":34000,"d":"Gas costs regarding curve pairing precompile input length"},"txDataNonZero":{"v":16,"d":"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"},"sstoreSentryGasEIP2200":{"v":2300,"d":"Minimum gas required to be present for an SSTORE call, not consumed"},"sstoreNoopGasEIP2200":{"v":800,"d":"Once per SSTORE operation if the value doesn\'t change"},"sstoreDirtyGasEIP2200":{"v":800,"d":"Once per SSTORE operation if a dirty value is changed"},"sstoreInitGasEIP2200":{"v":20000,"d":"Once per SSTORE operation from clean zero to non-zero"},"sstoreInitRefundEIP2200":{"v":19200,"d":"Once per SSTORE operation for resetting to the original zero value"},"sstoreCleanGasEIP2200":{"v":5000,"d":"Once per SSTORE operation from clean non-zero to something else"},"sstoreCleanRefundEIP2200":{"v":4200,"d":"Once per SSTORE operation for resetting to the original non-zero value"},"sstoreClearRefundEIP2200":{"v":15000,"d":"Once per SSTORE operation for clearing an originally existing storage slot"},"balance":{"v":700,"d":"Base fee of the BALANCE opcode"},"extcodehash":{"v":700,"d":"Base fee of the EXTCODEHASH opcode"},"chainid":{"v":2,"d":"Base fee of the CHAINID opcode"},"selfbalance":{"v":5,"d":"Base fee of the SELFBALANCE opcode"},"sload":{"v":800,"d":"Base fee of the SLOAD opcode"}},"vm":{},"pow":{}}')},68816:e=>{e.exports=JSON.parse('{"name":"london","comment":"HF targeted for July 2021 following the Berlin fork","url":"https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md","status":"Final","eips":[1559,3198,3529,3541]}')},69430:e=>{e.exports=JSON.parse('{"name":"merge","comment":"Hardfork to upgrade the consensus mechanism to Proof-of-Stake","url":"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md","status":"Final","consensus":{"type":"pos","algorithm":"casper","casper":{}},"eips":[3675,4399]}')},69828:e=>{e.exports=JSON.parse('{"name":"mergeForkIdTransition","comment":"Pre-merge hardfork to fork off non-upgraded clients","url":"https://eips.ethereum.org/EIPS/eip-3675","status":"Draft","eips":[]}')},99752:e=>{e.exports=JSON.parse('{"name":"muirGlacier","comment":"HF to delay the difficulty bomb","url":"https://eips.ethereum.org/EIPS/eip-2384","status":"Final","gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":9000000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},11683:e=>{e.exports=JSON.parse('{"name":"petersburg","comment":"Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople","url":"https://eips.ethereum.org/EIPS/eip-1716","status":"Final","gasConfig":{},"gasPrices":{"netSstoreNoopGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreInitGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreCleanGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreDirtyGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreClearRefund":{"v":null,"d":"Removed along EIP-1283"},"netSstoreResetRefund":{"v":null,"d":"Removed along EIP-1283"},"netSstoreResetClearRefund":{"v":null,"d":"Removed along EIP-1283"}},"vm":{},"pow":{}}')},62783:e=>{e.exports=JSON.parse('{"name":"shanghai","comment":"Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode","url":"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md","status":"Final","eips":[3651,3855,3860,4895]}')},49302:e=>{e.exports=JSON.parse('{"name":"shardingFork","comment":"Internal hardfork to test proto-danksharding (do not use in production)","url":"https://eips.ethereum.org/EIPS/eip-4844","status":"Experimental","eips":[4844]}')},53521:e=>{e.exports=JSON.parse('{"name":"spuriousDragon","comment":"HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit","url":"https://eips.ethereum.org/EIPS/eip-607","status":"Final","gasConfig":{},"gasPrices":{"expByte":{"v":50,"d":"Times ceil(log256(exponent)) for the EXP instruction"}},"vm":{"maxCodeSize":{"v":24576,"d":"Maximum length of contract code"}},"pow":{}}')},53725:e=>{e.exports=JSON.parse('{"name":"tangerineWhistle","comment":"Hardfork with gas cost changes for IO-heavy operations","url":"https://eips.ethereum.org/EIPS/eip-608","status":"Final","gasConfig":{},"gasPrices":{"sload":{"v":200,"d":"Once per SLOAD operation"},"call":{"v":700,"d":"Once per CALL operation & message call transaction"},"extcodesize":{"v":700,"d":"Base fee of the EXTCODESIZE opcode"},"extcodecopy":{"v":700,"d":"Base fee of the EXTCODECOPY opcode"},"balance":{"v":400,"d":"Base fee of the BALANCE opcode"},"delegatecall":{"v":700,"d":"Base fee of the DELEGATECALL opcode"},"callcode":{"v":700,"d":"Base fee of the CALLCODE opcode"},"selfdestruct":{"v":5000,"d":"Base fee of the SELFDESTRUCT opcode"}},"vm":{},"pow":{}}')}}]);
//# sourceMappingURL=9856.f8169386.chunk.js.map