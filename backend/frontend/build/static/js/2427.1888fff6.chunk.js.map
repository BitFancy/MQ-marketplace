{"version":3,"file":"static/js/2427.1888fff6.chunk.js","mappings":"iOAOO,MAAMA,UAAyCC,EAAAA,GACjDC,eACAC,GAAG,IACDC,EAAAA,IAEFC,GAAE,SAAUC,EAASC,EAAIC,EAAQC,GAClC,MAAO,EACHC,EAAAA,EAAAA,IAAeF,EAAQG,KAAKC,UAAWD,KAAKE,cAC5CC,EAAAA,EAAAA,IAAkBN,EAAQF,EAAQS,oCAE1C,IACKC,EAAE,mCAAoC,4BAA6B,CAAC,GACpEC,EAAE,YAAa,oCACfC,EAAEC,EAAAA,GAAoDC,EAAAA,IACtDC,IAAIC,EAAAA,IACJC,GAAGC,EAAAA,IACHC,UCrBL,MAAMC,EAA6B,YAC7BC,EAAgBC,MAAOC,EAASC,EAAeC,KAA6B,IAAAC,EAAAC,EAC9E,MAAMC,EAA4B,oBAAZL,QAA+BA,IAAYA,EAC3DM,EAAwC,oBAAlBL,QAAqCA,IAAkBA,EAEnF,OADwB,OAAxBC,QAAwB,IAAxBA,GAA+B,QAAPC,EAAxBD,EAA0BK,aAAK,IAAAJ,GAA/BA,EAAAK,KAAAN,EAAkC,qCAAsC,sBAAuB,GAAFO,OAAKJ,EAAM,kBAAAI,OAAkBH,EAAY,uBAAAG,OAAuBZ,EAA0B,mBAC1J,QAA7BO,EAAa,OAANC,QAAM,IAANA,EAAAA,EAAUC,SAAY,IAAAF,EAAAA,EAAIP,CAA0B,EA8BlDa,EAAuCA,CAACC,EAAYC,KAC7D,IAAIC,EACJ,OAAOd,UACH,IAAKc,EAAW,KAAAC,EAAAC,EAAAC,EACZ,MAAM,OAAEC,GAAmB,OAAVN,QAAU,IAAVA,GAA8B,QAApBG,EAAVH,EAAYO,0BAAkB,IAAAJ,OAAA,EAA9BA,EAAgCG,QAAM,OAAEZ,EAAM,eAAEc,GAA2B,OAAVR,QAAU,IAAVA,GAA8B,QAApBI,EAAVJ,EAAYO,0BAAkB,IAAAH,OAAA,EAA9BA,EAAgCI,gBAAc,yBAAEjB,GAA8BS,EAC1JS,QAAuBtB,EAAcO,EAAkB,OAAVM,QAAU,IAAVA,GAA8B,QAApBK,EAAVL,EAAYO,0BAAkB,IAAAF,OAAA,EAA9BA,EAAgCX,OAAQH,GAC3FW,EAAY,IAAID,EAAc,CAC1BP,OAAQe,EACRD,eAAgBA,EAChBF,OAAQA,GAEhB,CACA,MAAM,YAAEI,SAAsBR,EAAUS,KAAK,IAAInD,EAAiCoD,IAClF,IAAKF,IAAgBA,EAAYG,cAAgBH,EAAYI,gBACzD,MAAM,IAAIC,MAAM,sEAADjB,OAAuEc,EAAOI,UAEjG,MAAO,CACHC,YAAaP,EAAYG,YACzBK,gBAAiBR,EAAYI,gBAC7BK,aAAcT,EAAYU,aAC1BC,WAAYX,EAAYY,WACxBC,gBAAiBb,EAAYc,gBAChC,CACJ,E,eC1DL,MAAMC,EAA+BA,CAACC,EAAUC,IACvCA,EAGM,cAAoCD,EACvCE,WAAAA,CAAY5D,GACR6D,MAAM7D,GACN,IAAK,MAAM8D,KAAiBH,EACxBxD,KAAK4D,gBAAgBC,IAAIF,EAEjC,GARGJ,EAYF3B,EAAuC,eAAkBkC,EAAUC,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAA,OAAKC,EAAtBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAsET,EAA6Ba,EAAAA,EAAWL,GAAY,C","sources":["../node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithWebIdentityCommand.js","../node_modules/@aws-sdk/client-sts/dist-es/defaultStsRoleAssumers.js","../node_modules/@aws-sdk/client-sts/dist-es/defaultRoleAssumers.js"],"sourcesContent":["import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog, } from \"../models/models_0\";\nimport { de_AssumeRoleWithWebIdentityCommand, se_AssumeRoleWithWebIdentityCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class AssumeRoleWithWebIdentityCommand extends $Command\n    .classBuilder()\n    .ep({\n    ...commonParams,\n})\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"AWSSecurityTokenServiceV20110615\", \"AssumeRoleWithWebIdentity\", {})\n    .n(\"STSClient\", \"AssumeRoleWithWebIdentityCommand\")\n    .f(AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog)\n    .ser(se_AssumeRoleWithWebIdentityCommand)\n    .de(de_AssumeRoleWithWebIdentityCommand)\n    .build() {\n}\n","import { AssumeRoleCommand } from \"./commands/AssumeRoleCommand\";\nimport { AssumeRoleWithWebIdentityCommand, } from \"./commands/AssumeRoleWithWebIdentityCommand\";\nconst ASSUME_ROLE_DEFAULT_REGION = \"us-east-1\";\nconst resolveRegion = async (_region, _parentRegion, credentialProviderLogger) => {\n    const region = typeof _region === \"function\" ? await _region() : _region;\n    const parentRegion = typeof _parentRegion === \"function\" ? await _parentRegion() : _parentRegion;\n    credentialProviderLogger?.debug?.(\"@aws-sdk/client-sts::resolveRegion\", \"accepting first of:\", `${region} (provider)`, `${parentRegion} (parent client)`, `${ASSUME_ROLE_DEFAULT_REGION} (STS default)`);\n    return region ?? parentRegion ?? ASSUME_ROLE_DEFAULT_REGION;\n};\nexport const getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {\n    let stsClient;\n    let closureSourceCreds;\n    return async (sourceCreds, params) => {\n        closureSourceCreds = sourceCreds;\n        if (!stsClient) {\n            const { logger = stsOptions?.parentClientConfig?.logger, region, requestHandler = stsOptions?.parentClientConfig?.requestHandler, credentialProviderLogger, } = stsOptions;\n            const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);\n            stsClient = new stsClientCtor({\n                credentialDefaultProvider: () => async () => closureSourceCreds,\n                region: resolvedRegion,\n                requestHandler: requestHandler,\n                logger: logger,\n            });\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n            credentialScope: Credentials.CredentialScope,\n        };\n    };\n};\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {\n    let stsClient;\n    return async (params) => {\n        if (!stsClient) {\n            const { logger = stsOptions?.parentClientConfig?.logger, region, requestHandler = stsOptions?.parentClientConfig?.requestHandler, credentialProviderLogger, } = stsOptions;\n            const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);\n            stsClient = new stsClientCtor({\n                region: resolvedRegion,\n                requestHandler: requestHandler,\n                logger: logger,\n            });\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n            credentialScope: Credentials.CredentialScope,\n        };\n    };\n};\nexport const decorateDefaultCredentialProvider = (provider) => (input) => provider({\n    roleAssumer: getDefaultRoleAssumer(input, input.stsClientCtor),\n    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input, input.stsClientCtor),\n    ...input,\n});\n","import { getDefaultRoleAssumer as StsGetDefaultRoleAssumer, getDefaultRoleAssumerWithWebIdentity as StsGetDefaultRoleAssumerWithWebIdentity, } from \"./defaultStsRoleAssumers\";\nimport { STSClient } from \"./STSClient\";\nconst getCustomizableStsClientCtor = (baseCtor, customizations) => {\n    if (!customizations)\n        return baseCtor;\n    else\n        return class CustomizableSTSClient extends baseCtor {\n            constructor(config) {\n                super(config);\n                for (const customization of customizations) {\n                    this.middlewareStack.use(customization);\n                }\n            }\n        };\n};\nexport const getDefaultRoleAssumer = (stsOptions = {}, stsPlugins) => StsGetDefaultRoleAssumer(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins) => StsGetDefaultRoleAssumerWithWebIdentity(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));\nexport const decorateDefaultCredentialProvider = (provider) => (input) => provider({\n    roleAssumer: getDefaultRoleAssumer(input),\n    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input),\n    ...input,\n});\n"],"names":["AssumeRoleWithWebIdentityCommand","$Command","classBuilder","ep","commonParams","m","Command","cs","config","o","getSerdePlugin","this","serialize","deserialize","getEndpointPlugin","getEndpointParameterInstructions","s","n","f","AssumeRoleWithWebIdentityRequestFilterSensitiveLog","AssumeRoleWithWebIdentityResponseFilterSensitiveLog","ser","se_AssumeRoleWithWebIdentityCommand","de","de_AssumeRoleWithWebIdentityCommand","build","ASSUME_ROLE_DEFAULT_REGION","resolveRegion","async","_region","_parentRegion","credentialProviderLogger","_credentialProviderLo","_ref","region","parentRegion","debug","call","concat","getDefaultRoleAssumerWithWebIdentity","stsOptions","stsClientCtor","stsClient","_stsOptions$parentCli4","_stsOptions$parentCli5","_stsOptions$parentCli6","logger","parentClientConfig","requestHandler","resolvedRegion","Credentials","send","params","AccessKeyId","SecretAccessKey","Error","RoleArn","accessKeyId","secretAccessKey","sessionToken","SessionToken","expiration","Expiration","credentialScope","CredentialScope","getCustomizableStsClientCtor","baseCtor","customizations","constructor","super","customization","middlewareStack","use","stsPlugins","arguments","length","undefined","StsGetDefaultRoleAssumerWithWebIdentity","STSClient"],"sourceRoot":""}